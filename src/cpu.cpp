#include "cpu.hpp"
#include "arith.hpp"
#include "bin.hpp"
#include "decoder.hpp"
#include "stuff.hpp"
#include <atomic>
#include <cassert>
#include <cstdint>
#include <cstdio>
#include <string>

u32 Cpu::exec(u32 word) {
  cur = word;
  Instr instr = Decoder::decodeA(word);
  switch (instr) {
  case Instr::adcImm:
    return adcImm();
  case Instr::adcReg:
    return adcReg();
  case Instr::adcShiftedReg:
    return adcShiftedReg();
  case Instr::addImm:
    return addImm();
  case Instr::addReg:
    return addReg();
  case Instr::addShiftedReg:
    return addShiftedReg();
  case Instr::subImm:
    return subImm();
  case Instr::subReg:
    return subReg();
  case Instr::subShiftedReg:
    return subShiftedReg();
  case Instr::cmnImm:
    return cmnImm();
  case Instr::cmnReg:
    return cmnReg();
  case Instr::cmnShiftedReg:
    return cmnShiftedReg();
  case Instr::cmpImm:
    return cmpImm();
  case Instr::cmpReg:
    return cmpReg();
  case Instr::cmpShiftedReg:
    return cmpShiftedReg();
  case Instr::adr:
    return adr();
  case Instr::andImm:
    return andImm();
  case Instr::andReg:
    return andReg();
  case Instr::andShiftedReg:
    return andShiftedReg();
  case Instr::eorImm:
    return eorImm();
  case Instr::eorReg:
    return eorReg();
  case Instr::eorShiftedReg:
    return eorShiftedReg();
  case Instr::teqImm:
    return teqImm();
  case Instr::teqReg:
    return teqReg();
  case Instr::teqShiftedReg:
    return teqShiftedReg();
  case Instr::tstImm:
    return tstImm();
  case Instr::tstReg:
    return tstReg();
  case Instr::tstShiftedReg:
    return tstShiftedReg();
  case Instr::asrImm:
    return asrImm();
  case Instr::asrReg:
    return asrReg();
  case Instr::lslImm:
    return lslImm();
  case Instr::lslReg:
    return lslReg();
  case Instr::lsrImm:
    return lsrImm();
  case Instr::rrx:
    return rrx();
  case Instr::rorImm:
    return rorImm();
  case Instr::rorReg:
    return rorReg();
  case Instr::rsbImm:
    return rsbImm();
  case Instr::rsbReg:
    return rsbReg();
  case Instr::rsbShiftedReg:
    return rsbShiftedReg();
  case Instr::rscImm:
    return rscImm();
  case Instr::rscReg:
    return rscReg();
  case Instr::rscShiftedReg:
    return rscShiftedReg();
  case Instr::movImm:
    return movImm();
  case Instr::movImm16:
    return movImm16();
  case Instr::movReg:
    return movReg();
  case Instr::movt:
    return movt();
  case Instr::bicImm:
    return bicImm();
  case Instr::bicReg:
    return bicReg();
  case Instr::bicShiftedReg:
    return bicShiftedReg();
  case Instr::bfc:
    return bfc();
  case Instr::bfi:
    return bfi();
  case Instr::clz:
    return clz();
  case Instr::mla:
    return mla();
  case Instr::mls:
    return mls();
  case Instr::mrs:
    return mrs();
  case Instr::msrImmApp:
    return msrImmApp();
  case Instr::msrApp:
    return msrApp();
  case Instr::mvnImm:
    return mvnImm();
  case Instr::mvnReg:
    return mvnReg();
  case Instr::mvnShiftedReg:
    return mvnShiftedReg();
  case Instr::mul:
    return mul();
  case Instr::nop:
    return nxt();
  case Instr::pkh:
    return pkh();
  case Instr::qadd: //==
    return qadd();
  case Instr::qadd16:
    return qadd16();
  case Instr::qadd8:
    return qadd8();
  case Instr::qasx:
    return qasx();
  case Instr::qdadd:
    return qdadd();
  case Instr::qdsub:
    return qdsub();
  case Instr::qsax:
    return qsax();
  case Instr::qsub:
    return qsub();
  case Instr::qsub16:
    return qsub16();
  case Instr::qsub8:
    return qsub8(); //===
  case Instr::rbit:
    return rbit();
  case Instr::rev:
    return rev();
  case Instr::rev16:
    return rev16();
  case Instr::revsh:
    return revsh();
  case Instr::sbfx:
    return sbfx();
  case Instr::sdiv:
    return sdiv();
  case Instr::ubfx:
    return ubfx();
  case Instr::udiv:
    return udiv();
  case Instr::umaal:
    return umaal();
  case Instr::umlal:
    return umlal();
  case Instr::umull:
    return umull();
  case Instr::uxtab:
    return uxtab();
  case Instr::uxtab16:
    return uxtab16();
  case Instr::uxtah:
    return uxtah();
  case Instr::uxtb:
    return uxtb();
  case Instr::uxtb16:
    return uxtb16();
  case Instr::uxth:
    return uxth();
  case Instr::sxtab:
    return sxtab();
  case Instr::sxtab16:
    return sxtab16();
  case Instr::sxtah:
    return sxtah();
  case Instr::sxth:
    return sxth();
  case Instr::sxtb:
    return sxtb();
  case Instr::sxtb16:
    return sxtb16();//T
  case Instr::smlabb:
    return smlabb();
  case Instr::smlad:
    return smlad();
  case Instr::smlal:
    return smlal();
  case Instr::smlalbb:
    return smlalbb();
  case Instr::smlald:
    return smlald();
  case Instr::smlawb:
    return smlawb();
  case Instr::smlsd:
    return smlsd();
  case Instr::smlsld:
    return smlsld();
  case Instr::smmla:
    return smmla();
  case Instr::smmls:
    return smmls();
  case Instr::smmul:
    return smmul();
  case Instr::smuad:
    return smuad();
  case Instr::smulbb:
    return smulbb();
  case Instr::smull:
    return smull();
  case Instr::smulwb:
    return smulwb();
  case Instr::smusd:
    return smusd();
  case Instr::ssat:
    return ssat();
  case Instr::ssat16:
    return ssat16();
  case Instr::usat:
    return usat();
  case Instr::usat16:
    return usat16();
  case Instr::sadd16:
    return sadd16();
  case Instr::sadd8:
    return sadd8();
  case Instr::sasx:
    return sasx();
  case Instr::sel:
    return sel();
  case Instr::shadd16:
    return shadd16();
  case Instr::shadd8:
    return shadd8();
  case Instr::shasx:
    return shasx();
  case Instr::ssax:
    return ssax();
  case Instr::shsax:
    return shsax();
  case Instr::orrReg:
    return orrReg();
  case Instr::lsrReg:
    return lsrReg();
  case Instr::orrShiftedReg:
    return orrShiftedReg();
  case Instr::orrImm:
    return orrImm();
  case Instr::ssub16:
    return ssub16();
  case Instr::ssub8:
    return ssub8();
  case Instr::shsub16:
    return shsub16();
  case Instr::shsub8:
    return shsub8();
  case Instr::usax:
    return usax();
  case Instr::usub16:
    return usub16();
  case Instr::usub8:
    return usub8();
  case Instr::uadd16:
    return uadd16();
  case Instr::uadd8:
    return uadd8();
  case Instr::uasx:
    return uasx();
  case Instr::uhadd16:
    return uhadd16();
  case Instr::uhadd8:
    return uhadd8();
  case Instr::uhasx:
    return uhasx();
  case Instr::uhsax:
    return uhsax();
  case Instr::uhsub16:
    return uhsub16();
  case Instr::uhsub8:
    return uhsub8();
  //default:
    // printf("unhandled instruction: ");
    // Decoder::printInstr(instr);
    // exit(1);
  }
}

u32 Cpu::x(const char *prog) { return exec(assemble(prog)); }

static void testadcImm();
static void testadcReg();
static void testadcShiftedReg();
static void testaddImm();
static void testadr();
static void testand();
static void testshift();
static void testmov();
static void testbits();
static void testmul();
static void testmrs();
static void testq();
static void testrbit();
static void testdiv();
static void testubfx();
static void testxtab();
static void testsmul();
static void testsmlawb();
static void testsmlsd();
static void testsmlsld();
static void testsmmla();
static void testsmmls();
static void testsmmul();
static void testsmuad();
static void testsmulbb();
static void testsmull();
static void testsmulwb();
static void testsmusd();
static void testssat();
static void testssat16();
void Cpu::test() {
  testssat16();
  // testssat();
  // testsmusd();
  // testsmulwb();
  // testsmull();
  //  testsmulbb();
  //   testsmuad();
  //    testsmmul();
  //     testsmmla();
  //      testsmlsld();
  //      testsmlsd();
  //       testsmlawb();
  //        testsmul();
  //         testxtab();
  //          testubfx();
  //         testdiv();
  //         testrbit();
  //         testq();
  //          testmrs();
  //           testmul();
  //          testbits();
  //            testmov();
  //            testshift();
  //            testand();
  //            testadr();
  //            testaddImm();
  //             testadcShiftedReg();
  //             testadcReg();
  //             testadcImm();
}

static void testssat16() {
  Cpu c;c.cf();
c.r(0, 0x1baf2d08);
c.r(1, 0x27bb21ca);
c.r(2, 0x7d3d5aba);
c.r(3, 0x5dfef922);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0xd53fe308);
c.expectreg(1,0x27bb21ca);
c.expectreg(2,0x7d3d5aba);
c.expectreg(3,0x5dfef922);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1ff0218b);
c.r(1, 0x79ecc218);
c.r(2, 0xdf5ae97);
c.r(3, 0x64c1c596);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0x36fb0ac0);
c.expectreg(1,0x79ecc218);
c.expectreg(2,0xdf5ae97);
c.expectreg(3,0x64c1c596);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0xb3e59);
c.r(1, 0x9feef17);
c.r(2, 0x6f916943);
c.r(3, 0x24121428);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0xcd3643ea);
c.expectreg(1,0x9feef17);
c.expectreg(2,0x6f916943);
c.expectreg(3,0x24121428);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1bde48f7);
c.r(1, 0x11a6000d);
c.r(2, 0x6213ee28);
c.r(3, 0x237ee56c);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0xd74989f2);
c.expectreg(1,0x11a6000d);
c.expectreg(2,0x6213ee28);
c.expectreg(3,0x237ee56c);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1b077546);
c.r(1, 0x73b97863);
c.r(2, 0x652c9d4e);
c.r(3, 0x264258cf);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0x746ed0a);
c.expectreg(1,0x73b97863);
c.expectreg(2,0x652c9d4e);
c.expectreg(3,0x264258cf);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x318945b6);
c.r(1, 0x480029cc);
c.r(2, 0x378914f);
c.r(3, 0x16441904);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0x22c4cc3e);
c.expectreg(1,0x480029cc);
c.expectreg(2,0x378914f);
c.expectreg(3,0x16441904);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x5943db61);
c.r(1, 0xf8136c5);
c.r(2, 0x43fd2848);
c.r(3, 0x42d61354);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0xe6c2073e);
c.expectreg(1,0xf8136c5);
c.expectreg(2,0x43fd2848);
c.expectreg(3,0x42d61354);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x67d4b73a);
c.r(1, 0x68197c96);
c.r(2, 0x3d2e6078);
c.r(3, 0x383e442);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0x15f50e0f);
c.expectreg(1,0x68197c96);
c.expectreg(2,0x3d2e6078);
c.expectreg(3,0x383e442);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0xfd49e60);
c.r(1, 0x3a6bbb32);
c.r(2, 0x6182dd64);
c.r(3, 0x2fc4bfeb);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0xecf4efe7);
c.expectreg(1,0x3a6bbb32);
c.expectreg(2,0x6182dd64);
c.expectreg(3,0x2fc4bfeb);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x34587d4b);
c.r(1, 0x6f788bfb);
c.r(2, 0x14868582);
c.r(3, 0x3463bba4);
c.x("uhsub8 r0, r1, r2");
c.expectreg(0,0x2df9033c);
c.expectreg(1,0x6f788bfb);
c.expectreg(2,0x14868582);
c.expectreg(3,0x3463bba4);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;
  c.cf();
c.r(0, 0x74e28a);
c.r(1, 0x50191033);
c.r(2, 0x3c5852df);
c.r(3, 0x5fa26e67);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0x9e0deaa);
c.expectreg(1,0x50191033);
c.expectreg(2,0x3c5852df);
c.expectreg(3,0x5fa26e67);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x64bcf3ec);
c.r(1, 0xcddd920);
c.r(2, 0x65898a08);
c.r(3, 0x422e1838);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0xd3aa278c);
c.expectreg(1,0xcddd920);
c.expectreg(2,0x65898a08);
c.expectreg(3,0x422e1838);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x2bd07cff);
c.r(1, 0x62646781);
c.r(2, 0x5a87857e);
c.r(3, 0x2e2cda10);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0x3eef101);
c.expectreg(1,0x62646781);
c.expectreg(2,0x5a87857e);
c.expectreg(3,0x2e2cda10);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1b45321c);
c.r(1, 0x69ab9994);
c.r(2, 0x15a0029a);
c.r(3, 0x3c5cecd0);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0x2a054b7d);
c.expectreg(1,0x69ab9994);
c.expectreg(2,0x15a0029a);
c.expectreg(3,0x3c5cecd0);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x257d0175);
c.r(1, 0x1178e259);
c.r(2, 0x5b8f7168);
c.r(3, 0x70d44ff5);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0xdaf43878);
c.expectreg(1,0x1178e259);
c.expectreg(2,0x5b8f7168);
c.expectreg(3,0x70d44ff5);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x2f6a5d79);
c.r(1, 0x55180c44);
c.r(2, 0x2157d92e);
c.r(3, 0x4ad2140);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0x19e0998b);
c.expectreg(1,0x55180c44);
c.expectreg(2,0x2157d92e);
c.expectreg(3,0x4ad2140);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x66fff5d4);
c.r(1, 0x273fe2d2);
c.r(2, 0x56dea730);
c.r(3, 0x32425bad);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0xe8301dd1);
c.expectreg(1,0x273fe2d2);
c.expectreg(2,0x56dea730);
c.expectreg(3,0x32425bad);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1657b678);
c.r(1, 0x5d34ea68);
c.r(2, 0x7ae231da);
c.r(3, 0x16cc9903);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0xf1295c47);
c.expectreg(1,0x5d34ea68);
c.expectreg(2,0x7ae231da);
c.expectreg(3,0x16cc9903);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x2d4dfa9b);
c.r(1, 0x373a84b9);
c.r(2, 0x766f076a);
c.r(3, 0x120aee88);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0xe0653ea7);
c.expectreg(1,0x373a84b9);
c.expectreg(2,0x766f076a);
c.expectreg(3,0x120aee88);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x44185dd9);
c.r(1, 0x5bf89172);
c.r(2, 0x543906c0);
c.r(3, 0x6fe8dad8);
c.x("uhsub16 r0, r1, r2");
c.expectreg(0,0x3df4559);
c.expectreg(1,0x5bf89172);
c.expectreg(2,0x543906c0);
c.expectreg(3,0x6fe8dad8);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;

  c.cf();
c.r(0, 0x4435b6b);
c.r(1, 0x14952dff);
c.r(2, 0x6267bfc9);
c.r(3, 0x359bc581);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0xaa664833);
c.expectreg(1,0x14952dff);
c.expectreg(2,0x6267bfc9);
c.expectreg(3,0x359bc581);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x6282a21c);
c.r(1, 0xa596f7e);
c.r(2, 0x4fbdf50c);
c.r(3, 0x2b00cb56);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0x8aa65f9d);
c.expectreg(1,0xa596f7e);
c.expectreg(2,0x4fbdf50c);
c.expectreg(3,0x2b00cb56);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x3135a71d);
c.r(1, 0x6a41a959);
c.r(2, 0x1965e595);
c.r(3, 0x3a0c107b);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0xc256615f);
c.expectreg(1,0x6a41a959);
c.expectreg(2,0x1965e595);
c.expectreg(3,0x3a0c107b);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x6e9880db);
c.r(1, 0xd595365);
c.r(2, 0x318c049b);
c.r(3, 0x54f93d16);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0x45f4278);
c.expectreg(1,0xd595365);
c.expectreg(2,0x318c049b);
c.expectreg(3,0x54f93d16);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x54cfda9d);
c.r(1, 0x4c658c58);
c.r(2, 0x3f5000a6);
c.r(3, 0x7df6c588);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0x25df65d4);
c.expectreg(1,0x4c658c58);
c.expectreg(2,0x3f5000a6);
c.expectreg(3,0x7df6c588);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1782021e);
c.r(1, 0x1b6842a);
c.r(2, 0x7fd1907a);
c.r(3, 0x1697da79);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0xb89e81fd);
c.expectreg(1,0x1b6842a);
c.expectreg(2,0x7fd1907a);
c.expectreg(3,0x1697da79);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x75ae6eab);
c.r(1, 0x623f61fc);
c.r(2, 0x49b52f39);
c.r(3, 0x441fb057);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0x198355d8);
c.expectreg(1,0x623f61fc);
c.expectreg(2,0x49b52f39);
c.expectreg(3,0x441fb057);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x500c9ee8);
c.r(1, 0x45ba6d8f);
c.r(2, 0x53889432);
c.r(3, 0x544ffa54);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0xd8c4608b);
c.expectreg(1,0x45ba6d8f);
c.expectreg(2,0x53889432);
c.expectreg(3,0x544ffa54);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x5a4f9b8e);
c.r(1, 0x35f053fb);
c.r(2, 0x9ebbfd5);
c.r(3, 0x3cd23daa);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0xbb0d2ef3);
c.expectreg(1,0x35f053fb);
c.expectreg(2,0x9ebbfd5);
c.expectreg(3,0x3cd23daa);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x4049c37a);
c.r(1, 0x59a9b4e1);
c.r(2, 0x67d30900);
c.r(3, 0x717f6a97);
c.x("uhsax r0, r1, r2");
c.expectreg(0,0x28548e5a);
c.expectreg(1,0x59a9b4e1);
c.expectreg(2,0x67d30900);
c.expectreg(3,0x717f6a97);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;

  c.cf();
c.r(0, 0x5aeaccb);
c.r(1, 0x4bb98345);
c.r(2, 0x41576dd);
c.r(3, 0x6449b933);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x614b3f98);
c.expectreg(1,0x4bb98345);
c.expectreg(2,0x41576dd);
c.expectreg(3,0x6449b933);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x5c792d1f);
c.r(1, 0x36a91846);
c.r(2, 0x192fd8f3);
c.r(3, 0x6e92d0d3);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x87ceff8b);
c.expectreg(1,0x36a91846);
c.expectreg(2,0x192fd8f3);
c.expectreg(3,0x6e92d0d3);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1679b070);
c.r(1, 0x639b8823);
c.r(2, 0x107d8268);
c.r(3, 0x4a55b22c);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x73013bd3);
c.expectreg(1,0x639b8823);
c.expectreg(2,0x107d8268);
c.expectreg(3,0x4a55b22c);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x2009c951);
c.r(1, 0x176e9bb);
c.r(2, 0x24213b74);
c.r(3, 0x6f12ad7f);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x1e7562cd);
c.expectreg(1,0x176e9bb);
c.expectreg(2,0x24213b74);
c.expectreg(3,0x6f12ad7f);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x2094eee);
c.r(1, 0x5d5e1a6a);
c.r(2, 0x75586ebc);
c.r(3, 0x4eda0208);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x660dd289);
c.expectreg(1,0x5d5e1a6a);
c.expectreg(2,0x75586ebc);
c.expectreg(3,0x4eda0208);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1607909f);
c.r(1, 0x402d412a);
c.r(2, 0x29afaebd);
c.r(3, 0x9090f0c);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x77750bbd);
c.expectreg(1,0x402d412a);
c.expectreg(2,0x29afaebd);
c.expectreg(3,0x9090f0c);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x6546701c);
c.r(1, 0x18d01e04);
c.r(2, 0x209aa4b5);
c.r(3, 0x7a604c4);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x5ec2feb5);
c.expectreg(1,0x18d01e04);
c.expectreg(2,0x209aa4b5);
c.expectreg(3,0x7a604c4);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x608f2733);
c.r(1, 0x795461c5);
c.r(2, 0x2f78c0d6);
c.r(3, 0x663dd3fe);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x9d151926);
c.expectreg(1,0x795461c5);
c.expectreg(2,0x2f78c0d6);
c.expectreg(3,0x663dd3fe);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x450de50a);
c.r(1, 0x338e37b4);
c.r(2, 0x4a878d31);
c.r(3, 0x21871229);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0x605ff696);
c.expectreg(1,0x338e37b4);
c.expectreg(2,0x4a878d31);
c.expectreg(3,0x21871229);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x6a374ffa);
c.r(1, 0x63b76625);
c.r(2, 0x1019e2fc);
c.r(3, 0xb1006a);
c.x("uhasx r0, r1, r2");
c.expectreg(0,0xa3592b06);
c.expectreg(1,0x63b76625);
c.expectreg(2,0x1019e2fc);
c.expectreg(3,0xb1006a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;

  c.cf();
c.r(0, 0x459f56e0);
c.r(1, 0x36294f45);
c.r(2, 0x66704452);
c.r(3, 0x38a25202);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x4e4c494b);
c.expectreg(1,0x36294f45);
c.expectreg(2,0x66704452);
c.expectreg(3,0x38a25202);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x76170cc2);
c.r(1, 0x92737a3);
c.r(2, 0x556f1ee8);
c.r(3, 0x4626aba0);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x2f4b2ac5);
c.expectreg(1,0x92737a3);
c.expectreg(2,0x556f1ee8);
c.expectreg(3,0x4626aba0);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x25d85c80);
c.r(1, 0x607acce8);
c.r(2, 0x532ed605);
c.r(3, 0x2b5f20ca);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x5954d176);
c.expectreg(1,0x607acce8);
c.expectreg(2,0x532ed605);
c.expectreg(3,0x2b5f20ca);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x71ee777e);
c.r(1, 0x446bfc53);
c.r(2, 0x5171b3e9);
c.r(3, 0x5dc62d83);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x4a6ed79e);
c.expectreg(1,0x446bfc53);
c.expectreg(2,0x5171b3e9);
c.expectreg(3,0x5dc62d83);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x6dea0b3b);
c.r(1, 0x5aaae9f3);
c.r(2, 0x412052a2);
c.r(3, 0x323a174f);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x4d659dca);
c.expectreg(1,0x5aaae9f3);
c.expectreg(2,0x412052a2);
c.expectreg(3,0x323a174f);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x2170a5e2);
c.r(1, 0x65512ed8);
c.r(2, 0x2ea1ba5d);
c.r(3, 0x56711c00);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x4979749a);
c.expectreg(1,0x65512ed8);
c.expectreg(2,0x2ea1ba5d);
c.expectreg(3,0x56711c00);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x629ae741);
c.r(1, 0x108617ee);
c.r(2, 0x240fa037);
c.r(3, 0x613f8548);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x1a4a5b92);
c.expectreg(1,0x108617ee);
c.expectreg(2,0x240fa037);
c.expectreg(3,0x613f8548);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x4f76e0a3);
c.r(1, 0x5ba21347);
c.r(2, 0x494cf692);
c.r(3, 0x15163783);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x5277846c);
c.expectreg(1,0x5ba21347);
c.expectreg(2,0x494cf692);
c.expectreg(3,0x15163783);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x11cb628c);
c.r(1, 0x2fbd3ae4);
c.r(2, 0x4db88985);
c.r(3, 0x7e26f4e);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x3eba61b4);
c.expectreg(1,0x2fbd3ae4);
c.expectreg(2,0x4db88985);
c.expectreg(3,0x7e26f4e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x38e47287);
c.r(1, 0x2327a86e);
c.r(2, 0x4e091aef);
c.r(3, 0x5ebccf07);
c.x("uhadd8 r0, r1, r2");
c.expectreg(0,0x381861ae);
c.expectreg(1,0x2327a86e);
c.expectreg(2,0x4e091aef);
c.expectreg(3,0x5ebccf07);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;
  c.cf();
c.r(0, 0x36afb15);
c.r(1, 0x7f946fe9);
c.r(2, 0x40284c54);
c.r(3, 0x33f7a103);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x5fde5e1e);
c.expectreg(1,0x7f946fe9);
c.expectreg(2,0x40284c54);
c.expectreg(3,0x33f7a103);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1ad3d613);
c.r(1, 0x28c52b36);
c.r(2, 0x2d9b5fdb);
c.r(3, 0x48fb491);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x2b304588);
c.expectreg(1,0x28c52b36);
c.expectreg(2,0x2d9b5fdb);
c.expectreg(3,0x48fb491);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x51ef2be7);
c.r(1, 0x6c394cf5);
c.r(2, 0x66c8a71d);
c.r(3, 0x6113e4ed);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x69807a09);
c.expectreg(1,0x6c394cf5);
c.expectreg(2,0x66c8a71d);
c.expectreg(3,0x6113e4ed);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x3e6f5f82);
c.r(1, 0x7f1b7e46);
c.r(2, 0x11eae38b);
c.r(3, 0x6a0ed14e);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x4882b0e8);
c.expectreg(1,0x7f1b7e46);
c.expectreg(2,0x11eae38b);
c.expectreg(3,0x6a0ed14e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x2e554453);
c.r(1, 0x34634f23);
c.r(2, 0x1ad4072);
c.r(3, 0x28adf192);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x1b0847ca);
c.expectreg(1,0x34634f23);
c.expectreg(2,0x1ad4072);
c.expectreg(3,0x28adf192);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x43ccd170);
c.r(1, 0x3cf5076c);
c.r(2, 0x7e771843);
c.r(3, 0x67df7902);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x5db60fd7);
c.expectreg(1,0x3cf5076c);
c.expectreg(2,0x7e771843);
c.expectreg(3,0x67df7902);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x6a313c84);
c.r(1, 0x65bd7275);
c.r(2, 0x68eaa6cb);
c.r(3, 0x44437d35);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x67538ca0);
c.expectreg(1,0x65bd7275);
c.expectreg(2,0x68eaa6cb);
c.expectreg(3,0x44437d35);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x67a5520e);
c.r(1, 0x437fbbe6);
c.r(2, 0x56a0e36a);
c.r(3, 0x6b104d23);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x4d0fcfa8);
c.expectreg(1,0x437fbbe6);
c.expectreg(2,0x56a0e36a);
c.expectreg(3,0x6b104d23);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x43142bcf);
c.r(1, 0x16c92fbe);
c.r(2, 0x1f07ee26);
c.r(3, 0x5de801e2);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x1ae88ef2);
c.expectreg(1,0x16c92fbe);
c.expectreg(2,0x1f07ee26);
c.expectreg(3,0x5de801e2);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x3f8e5af5);
c.r(1, 0x4ca34e02);
c.r(2, 0x6277b674);
c.r(3, 0x117d86dc);
c.x("uhadd16 r0, r1, r2");
c.expectreg(0,0x578d823b);
c.expectreg(1,0x4ca34e02);
c.expectreg(2,0x6277b674);
c.expectreg(3,0x117d86dc);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;

  c.cf();
c.r(0, 0x4fb3474a);
c.r(1, 0x54cd730f);
c.r(2, 0x1f61ee3a);
c.r(3, 0x364b6);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x430753ae);
c.expectreg(1,0x54cd730f);
c.expectreg(2,0x1f61ee3a);
c.expectreg(3,0x364b6);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x3f789f66);
c.r(1, 0x14e2d744);
c.r(2, 0x33101909);
c.r(3, 0x2fcc331a);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x2deba434);
c.expectreg(1,0x14e2d744);
c.expectreg(2,0x33101909);
c.expectreg(3,0x2fcc331a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x64dce15f);
c.r(1, 0x1264a867);
c.r(2, 0x291d361e);
c.r(3, 0x753690e5);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x48827f4a);
c.expectreg(1,0x1264a867);
c.expectreg(2,0x291d361e);
c.expectreg(3,0x753690e5);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0xda76196);
c.r(1, 0x156bba66);
c.r(2, 0x31758ac9);
c.r(3, 0x60949d89);
c.x("uasx r0, r1, r2");
c.expectreg(0,0xa03488f1);
c.expectreg(1,0x156bba66);
c.expectreg(2,0x31758ac9);
c.expectreg(3,0x60949d89);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x72e20212);
c.r(1, 0x5561e9c0);
c.r(2, 0x4de3410b);
c.r(3, 0x7d5249e3);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x966c9bdd);
c.expectreg(1,0x5561e9c0);
c.expectreg(2,0x4de3410b);
c.expectreg(3,0x7d5249e3);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x725f29fc);
c.r(1, 0x2df3811f);
c.r(2, 0xa1c069e);
c.r(3, 0x1dbe69fb);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x34917703);
c.expectreg(1,0x2df3811f);
c.expectreg(2,0xa1c069e);
c.expectreg(3,0x1dbe69fb);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x266b3550);
c.r(1, 0x4bb96eee);
c.r(2, 0x7b0e282f);
c.r(3, 0xf5d1d6e);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x73e8f3e0);
c.expectreg(1,0x4bb96eee);
c.expectreg(2,0x7b0e282f);
c.expectreg(3,0xf5d1d6e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x37c4750c);
c.r(1, 0x3534dcbc);
c.r(2, 0x2ed53393);
c.r(3, 0x777bc57);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x68c7ade7);
c.expectreg(1,0x3534dcbc);
c.expectreg(2,0x2ed53393);
c.expectreg(3,0x777bc57);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0xa024fcb);
c.r(1, 0x4e3721cd);
c.r(2, 0x77b210d);
c.r(3, 0x497aef31);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x6f441a52);
c.expectreg(1,0x4e3721cd);
c.expectreg(2,0x77b210d);
c.expectreg(3,0x497aef31);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x6319f911);
c.r(1, 0x3a8b3a16);
c.r(2, 0x7947224b);
c.r(3, 0x47f6da70);
c.x("uasx r0, r1, r2");
c.expectreg(0,0x5cd6c0cf);
c.expectreg(1,0x3a8b3a16);
c.expectreg(2,0x7947224b);
c.expectreg(3,0x47f6da70);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;

  c.cf();
c.r(0, 0x2746819);
c.r(1, 0x44f334e3);
c.r(2, 0x4d5ed98a);
c.r(3, 0x6d381dd0);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0x91510d6d);
c.expectreg(1,0x44f334e3);
c.expectreg(2,0x4d5ed98a);
c.expectreg(3,0x6d381dd0);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(7);
c.cf();
//===========================
c.cf();
c.r(0, 0x2e594d9a);
c.r(1, 0x5a5db876);
c.r(2, 0x546843a2);
c.r(3, 0x1780abd);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0xaec5fb18);
c.expectreg(1,0x5a5db876);
c.expectreg(2,0x546843a2);
c.expectreg(3,0x1780abd);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(1);
c.cf();
//===========================
c.cf();
c.r(0, 0x35f1795d);
c.r(1, 0x5dd0e092);
c.r(2, 0x1fb72040);
c.r(3, 0x254a8ee2);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0x7c8700d2);
c.expectreg(1,0x5dd0e092);
c.expectreg(2,0x1fb72040);
c.expectreg(3,0x254a8ee2);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(6);
c.cf();
//===========================
c.cf();
c.r(0, 0x45051d2e);
c.r(1, 0x332abea1);
c.r(2, 0x7df1c34d);
c.r(3, 0x4d2fdef3);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0xb01b81ee);
c.expectreg(1,0x332abea1);
c.expectreg(2,0x7df1c34d);
c.expectreg(3,0x4d2fdef3);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(6);
c.cf();
//===========================
c.cf();
c.r(0, 0x25e07812);
c.r(1, 0x41fed8de);
c.r(2, 0x3f457fbb);
c.r(3, 0x2f1bc4e3);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0x80435799);
c.expectreg(1,0x41fed8de);
c.expectreg(2,0x3f457fbb);
c.expectreg(3,0x2f1bc4e3);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(7);
c.cf();
//===========================
c.cf();
c.r(0, 0x20f2f582);
c.r(1, 0x3e9acd20);
c.r(2, 0x6b471cae);
c.r(3, 0x5015ecd4);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0xa9e1e9ce);
c.expectreg(1,0x3e9acd20);
c.expectreg(2,0x6b471cae);
c.expectreg(3,0x5015ecd4);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x406d0a7f);
c.r(1, 0x7947327a);
c.r(2, 0x1ddc51e3);
c.r(3, 0x7bc734be);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0x9623835d);
c.expectreg(1,0x7947327a);
c.expectreg(2,0x1ddc51e3);
c.expectreg(3,0x7bc734be);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(5);
c.cf();
//===========================
c.cf();
c.r(0, 0x4c3071bb);
c.r(1, 0x776b906d);
c.r(2, 0x6fdd1c59);
c.r(3, 0x4ea4d9d4);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0xe648acc6);
c.expectreg(1,0x776b906d);
c.expectreg(2,0x6fdd1c59);
c.expectreg(3,0x4ea4d9d4);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(4);
c.cf();
//===========================
c.cf();
c.r(0, 0x3c5ec550);
c.r(1, 0x3d3bf5e4);
c.r(2, 0x3bdcf7a5);
c.r(3, 0x6ab812eb);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0x7817ec89);
c.expectreg(1,0x3d3bf5e4);
c.expectreg(2,0x3bdcf7a5);
c.expectreg(3,0x6ab812eb);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(7);
c.cf();
//===========================
c.cf();
c.r(0, 0x1799ae5a);
c.r(1, 0x10453b47);
c.r(2, 0x6c301da8);
c.r(3, 0x4d8b27b7);
c.x("uadd8 r0, r1, r2");
c.expectreg(0,0x7c7558ef);
c.expectreg(1,0x10453b47);
c.expectreg(2,0x6c301da8);
c.expectreg(3,0x4d8b27b7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;
  c.cf();
c.r(0, 0x7aa48bc5);
c.r(1, 0x22dfdfc5);
c.r(2, 0xd92a6d4);
c.r(3, 0x30eab470);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x30718699);
c.expectreg(1,0x22dfdfc5);
c.expectreg(2,0xd92a6d4);
c.expectreg(3,0x30eab470);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x3726f9ad);
c.r(1, 0x18a4823e);
c.r(2, 0x59457254);
c.r(3, 0x4f79525b);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x71e9f492);
c.expectreg(1,0x18a4823e);
c.expectreg(2,0x59457254);
c.expectreg(3,0x4f79525b);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x79d7a6be);
c.r(1, 0x24396a58);
c.r(2, 0x256f452);
c.r(3, 0x372410c4);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x268f5eaa);
c.expectreg(1,0x24396a58);
c.expectreg(2,0x256f452);
c.expectreg(3,0x372410c4);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x265309f3);
c.r(1, 0x19bf6e28);
c.r(2, 0x2e7d0d23);
c.r(3, 0x352a055a);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x483c7b4b);
c.expectreg(1,0x19bf6e28);
c.expectreg(2,0x2e7d0d23);
c.expectreg(3,0x352a055a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x188b3993);
c.r(1, 0x12771375);
c.r(2, 0x741b8ca3);
c.r(3, 0x42733fea);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x8692a018);
c.expectreg(1,0x12771375);
c.expectreg(2,0x741b8ca3);
c.expectreg(3,0x42733fea);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x42599a73);
c.r(1, 0x36360df4);
c.r(2, 0x3c2cd9ce);
c.r(3, 0x5b24c3bd);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x7262e7c2);
c.expectreg(1,0x36360df4);
c.expectreg(2,0x3c2cd9ce);
c.expectreg(3,0x5b24c3bd);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x39dc021e);
c.r(1, 0x1b3bd96);
c.r(2, 0x40a1a9b0);
c.r(3, 0x48cbb3ad);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x42546746);
c.expectreg(1,0x1b3bd96);
c.expectreg(2,0x40a1a9b0);
c.expectreg(3,0x48cbb3ad);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x379f1d0f);
c.r(1, 0xeb51b81);
c.r(2, 0x1393997d);
c.r(3, 0x3243a8d4);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x2248b4fe);
c.expectreg(1,0xeb51b81);
c.expectreg(2,0x1393997d);
c.expectreg(3,0x3243a8d4);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x3194fb46);
c.r(1, 0x21264052);
c.r(2, 0x632e5d45);
c.r(3, 0x68bbf4f3);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x84549d97);
c.expectreg(1,0x21264052);
c.expectreg(2,0x632e5d45);
c.expectreg(3,0x68bbf4f3);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x39cac290);
c.r(1, 0x3c73cf99);
c.r(2, 0x3835474e);
c.r(3, 0x33a2694e);
c.x("uadd16 r0, r1, r2");
c.expectreg(0,0x74a816e7);
c.expectreg(1,0x3c73cf99);
c.expectreg(2,0x3835474e);
c.expectreg(3,0x33a2694e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0x28893f41);
c.r(1, 0x349a163c);
c.r(2, 0x61023830);
c.r(3, 0x36c808eb);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0xd398de0c);
c.expectreg(1,0x349a163c);
c.expectreg(2,0x61023830);
c.expectreg(3,0x36c808eb);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(5);
c.cf();
//===========================
c.cf();
c.r(0, 0x6b9a473b);
c.r(1, 0x58ea27b3);
c.r(2, 0x287c8c9a);
c.r(3, 0x56c2f7e7);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0x306e9b19);
c.expectreg(1,0x58ea27b3);
c.expectreg(2,0x287c8c9a);
c.expectreg(3,0x56c2f7e7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(13);
c.cf();
//===========================
c.cf();
c.r(0, 0x53111b7c);
c.r(1, 0x3c811f97);
c.r(2, 0x18f8b42d);
c.r(3, 0x4391e71e);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0x24896b6a);
c.expectreg(1,0x3c811f97);
c.expectreg(2,0x18f8b42d);
c.expectreg(3,0x4391e71e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(9);
c.cf();
//===========================
c.cf();
c.r(0, 0x50a64789);
c.r(1, 0x3ffd8c7c);
c.r(2, 0x5cdb8c3);
c.r(3, 0x20631023);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0x3a30d4b9);
c.expectreg(1,0x3ffd8c7c);
c.expectreg(2,0x5cdb8c3);
c.expectreg(3,0x20631023);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x6b67f457);
c.r(1, 0x48840374);
c.r(2, 0x7bc12348);
c.r(3, 0x52297ce7);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0xcdc3e02c);
c.expectreg(1,0x48840374);
c.expectreg(2,0x7bc12348);
c.expectreg(3,0x52297ce7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(1);
c.cf();
//===========================
c.cf();
c.r(0, 0x3813a868);
c.r(1, 0x68590f40);
c.r(2, 0x49a757ec);
c.r(3, 0x67a5eb64);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0x1fb2b854);
c.expectreg(1,0x68590f40);
c.expectreg(2,0x49a757ec);
c.expectreg(3,0x67a5eb64);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(8);
c.cf();
//===========================
c.cf();
c.r(0, 0x18bf555f);
c.r(1, 0x2f01de4b);
c.r(2, 0x75aaba39);
c.r(3, 0x5046e781);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0xba572412);
c.expectreg(1,0x2f01de4b);
c.expectreg(2,0x75aaba39);
c.expectreg(3,0x5046e781);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x2cca3b96);
c.r(1, 0xcaa6082);
c.r(2, 0x4c77a87b);
c.r(3, 0x55537ad7);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0xc033b807);
c.expectreg(1,0xcaa6082);
c.expectreg(2,0x4c77a87b);
c.expectreg(3,0x55537ad7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(5);
c.cf();
//===========================
c.cf();
c.r(0, 0x414476be);
c.r(1, 0x2d79e0ac);
c.r(2, 0xc1b83c2);
c.r(3, 0x2cdebdf9);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0x215e5dea);
c.expectreg(1,0x2d79e0ac);
c.expectreg(2,0xc1b83c2);
c.expectreg(3,0x2cdebdf9);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(14);
c.cf();
//===========================
c.cf();
c.r(0, 0x664085f);
c.r(1, 0x3498105c);
c.r(2, 0x3a1b5e0);
c.r(3, 0x597523dc);
c.x("usub8 r0, r1, r2");
c.expectreg(0,0x31f75b7c);
c.expectreg(1,0x3498105c);
c.expectreg(2,0x3a1b5e0);
c.expectreg(3,0x597523dc);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(8);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0x3dba5046);
c.r(1, 0x526eb391);
c.r(2, 0x51e8eb78);
c.r(3, 0x456fc234);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0x86c819);
c.expectreg(1,0x526eb391);
c.expectreg(2,0x51e8eb78);
c.expectreg(3,0x456fc234);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x6d4e16e3);
c.r(1, 0x352787eb);
c.r(2, 0x219c7a98);
c.r(3, 0x11e79603);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0x138b0d53);
c.expectreg(1,0x352787eb);
c.expectreg(2,0x219c7a98);
c.expectreg(3,0x11e79603);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x60a90b40);
c.r(1, 0x2e6f2231);
c.r(2, 0x4ea12bee);
c.r(3, 0x6ad62bfb);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0xdfcef643);
c.expectreg(1,0x2e6f2231);
c.expectreg(2,0x4ea12bee);
c.expectreg(3,0x6ad62bfb);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x4a01391d);
c.r(1, 0x6f3568f8);
c.r(2, 0x2bac5976);
c.r(3, 0x238c16ec);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0x43890f82);
c.expectreg(1,0x6f3568f8);
c.expectreg(2,0x2bac5976);
c.expectreg(3,0x238c16ec);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x2167f399);
c.r(1, 0x365fd60b);
c.r(2, 0x1b204067);
c.r(3, 0x3a523bec);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0x1b3f95a4);
c.expectreg(1,0x365fd60b);
c.expectreg(2,0x1b204067);
c.expectreg(3,0x3a523bec);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x17d45546);
c.r(1, 0x1f3ce252);
c.r(2, 0x19566048);
c.r(3, 0x7f88bc20);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0x5e6820a);
c.expectreg(1,0x1f3ce252);
c.expectreg(2,0x19566048);
c.expectreg(3,0x7f88bc20);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x7e881e05);
c.r(1, 0x404690ce);
c.r(2, 0x53f75e9c);
c.r(3, 0x5ca88a7a);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0xec4f3232);
c.expectreg(1,0x404690ce);
c.expectreg(2,0x53f75e9c);
c.expectreg(3,0x5ca88a7a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x4915a5ce);
c.r(1, 0x365fbd62);
c.r(2, 0x31a0a7c6);
c.r(3, 0x6cff615);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0x4bf159c);
c.expectreg(1,0x365fbd62);
c.expectreg(2,0x31a0a7c6);
c.expectreg(3,0x6cff615);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x8ce70f4);
c.r(1, 0x389933e);
c.r(2, 0x4c3fb849);
c.r(3, 0x761c87d7);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0xb74adaf5);
c.expectreg(1,0x389933e);
c.expectreg(2,0x4c3fb849);
c.expectreg(3,0x761c87d7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x38b11b2a);
c.r(1, 0x6ddc32e1);
c.r(2, 0x8041dda);
c.r(3, 0x195a266a);
c.x("usub16 r0, r1, r2");
c.expectreg(0,0x65d81507);
c.expectreg(1,0x6ddc32e1);
c.expectreg(2,0x8041dda);
c.expectreg(3,0x195a266a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0x4c55baff);
c.r(1, 0x1a869819);
c.r(2, 0x46074a2d);
c.r(3, 0x3dad6682);
c.x("usax r0, r1, r2");
c.expectreg(0,0xd059de20);
c.expectreg(1,0x1a869819);
c.expectreg(2,0x46074a2d);
c.expectreg(3,0x3dad6682);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x3a6b710c);
c.r(1, 0x1f3d63f0);
c.r(2, 0x7ea84c26);
c.r(3, 0x3eddd45a);
c.x("usax r0, r1, r2");
c.expectreg(0,0xd317e298);
c.expectreg(1,0x1f3d63f0);
c.expectreg(2,0x7ea84c26);
c.expectreg(3,0x3eddd45a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1067d609);
c.r(1, 0x333a8950);
c.r(2, 0x6cf56553);
c.r(3, 0x1d575314);
c.x("usax r0, r1, r2");
c.expectreg(0,0xcde7f645);
c.expectreg(1,0x333a8950);
c.expectreg(2,0x6cf56553);
c.expectreg(3,0x1d575314);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x441141df);
c.r(1, 0x727c530a);
c.r(2, 0x28db7983);
c.r(3, 0x4a364224);
c.x("usax r0, r1, r2");
c.expectreg(0,0xf8f97be5);
c.expectreg(1,0x727c530a);
c.expectreg(2,0x28db7983);
c.expectreg(3,0x4a364224);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x9a75675);
c.r(1, 0x5ba6d8dd);
c.r(2, 0x597863d6);
c.r(3, 0x6f058478);
c.x("usax r0, r1, r2");
c.expectreg(0,0xf7d03255);
c.expectreg(1,0x5ba6d8dd);
c.expectreg(2,0x597863d6);
c.expectreg(3,0x6f058478);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x3f09b0d1);
c.r(1, 0x7798ec26);
c.r(2, 0x2ad582f0);
c.r(3, 0x7dd5bf02);
c.x("usax r0, r1, r2");
c.expectreg(0,0xf4a816fb);
c.expectreg(1,0x7798ec26);
c.expectreg(2,0x2ad582f0);
c.expectreg(3,0x7dd5bf02);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x77b4e6c3);
c.r(1, 0x19ec508a);
c.r(2, 0x6c26271b);
c.r(3, 0x3e471a9a);
c.x("usax r0, r1, r2");
c.expectreg(0,0xf2d1bcb0);
c.expectreg(1,0x19ec508a);
c.expectreg(2,0x6c26271b);
c.expectreg(3,0x3e471a9a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x34935b87);
c.r(1, 0x269deb5a);
c.r(2, 0x6fede991);
c.r(3, 0xe91687);
c.x("usax r0, r1, r2");
c.expectreg(0,0x3d0c5b47);
c.expectreg(1,0x269deb5a);
c.expectreg(2,0x6fede991);
c.expectreg(3,0xe91687);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x41248373);
c.r(1, 0x35f533bf);
c.r(2, 0x3e967d09);
c.r(3, 0x7b8ff480);
c.x("usax r0, r1, r2");
c.expectreg(0,0xb8ec7255);
c.expectreg(1,0x35f533bf);
c.expectreg(2,0x3e967d09);
c.expectreg(3,0x7b8ff480);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x553297af);
c.r(1, 0x3d3ec930);
c.r(2, 0x3a6dc8da);
c.r(3, 0x659a6db8);
c.x("usax r0, r1, r2");
c.expectreg(0,0x7464039d);
c.expectreg(1,0x3d3ec930);
c.expectreg(2,0x3a6dc8da);
c.expectreg(3,0x659a6db8);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0x2a97a9a1);
c.r(1, 0x7f232489);
c.r(2, 0x506eb043);
c.r(3, 0x7013573e);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0x17da3aa3);
c.expectreg(1,0x7f232489);
c.expectreg(2,0x506eb043);
c.expectreg(3,0x7013573e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x5bae7d4b);
c.r(1, 0x54cfbffc);
c.r(2, 0x1b3f8cf8);
c.r(3, 0x7e8355bc);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0x1cc81902);
c.expectreg(1,0x54cfbffc);
c.expectreg(2,0x1b3f8cf8);
c.expectreg(3,0x7e8355bc);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x4edd942d);
c.r(1, 0x3b4fa476);
c.r(2, 0x1b73548b);
c.r(3, 0x1ad97b76);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0x10eea875);
c.expectreg(1,0x3b4fa476);
c.expectreg(2,0x1b73548b);
c.expectreg(3,0x1ad97b76);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x68eb11e6);
c.r(1, 0x4673ce0a);
c.r(2, 0x422db6d5);
c.r(3, 0x3211942);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0x2230c1a);
c.expectreg(1,0x4673ce0a);
c.expectreg(2,0x422db6d5);
c.expectreg(3,0x3211942);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x7fc4f97f);
c.r(1, 0x7d48bc03);
c.r(2, 0x5492573f);
c.r(3, 0x6cd86f84);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0x145bb2e2);
c.expectreg(1,0x7d48bc03);
c.expectreg(2,0x5492573f);
c.expectreg(3,0x6cd86f84);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1febfdde);
c.r(1, 0x2df1a915);
c.r(2, 0xe5a009c);
c.r(3, 0x678bce6d);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0xfcbd43c);
c.expectreg(1,0x2df1a915);
c.expectreg(2,0xe5a009c);
c.expectreg(3,0x678bce6d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x767de0b1);
c.r(1, 0x48f92a52);
c.r(2, 0x7b425264);
c.r(3, 0x425d10b5);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0xe6dbecf7);
c.expectreg(1,0x48f92a52);
c.expectreg(2,0x7b425264);
c.expectreg(3,0x425d10b5);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x3357472b);
c.r(1, 0x6c78f5b);
c.r(2, 0x6a6a3fa7);
c.r(3, 0x5deef0cc);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0xceaea85a);
c.expectreg(1,0x6c78f5b);
c.expectreg(2,0x6a6a3fa7);
c.expectreg(3,0x5deef0cc);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x5eab3e4);
c.r(1, 0x3ad8efea);
c.r(2, 0x4e02480a);
c.r(3, 0x61993130);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0xf6ebd3f0);
c.expectreg(1,0x3ad8efea);
c.expectreg(2,0x4e02480a);
c.expectreg(3,0x61993130);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0xfa8afe6);
c.r(1, 0x6941d503);
c.r(2, 0x601c86ec);
c.r(3, 0x5e864413);
c.x("shsub8 r0, r1, r2");
c.expectreg(0,0x412270b);
c.expectreg(1,0x6941d503);
c.expectreg(2,0x601c86ec);
c.expectreg(3,0x5e864413);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;

  c.cf();
c.r(0, 0x2ca38955);
c.r(1, 0x36d62728);
c.r(2, 0x3264c276);
c.r(3, 0x1f78ea27);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0x2393259);
c.expectreg(1,0x36d62728);
c.expectreg(2,0x3264c276);
c.expectreg(3,0x1f78ea27);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x565814fe);
c.r(1, 0x175e7a6);
c.r(2, 0x65826dcb);
c.r(3, 0x2f48354);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0xcdf9bced);
c.expectreg(1,0x175e7a6);
c.expectreg(2,0x65826dcb);
c.expectreg(3,0x2f48354);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x748aa636);
c.r(1, 0x759659b4);
c.r(2, 0x139f2fca);
c.r(3, 0x2ba47577);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0x30fb14f5);
c.expectreg(1,0x759659b4);
c.expectreg(2,0x139f2fca);
c.expectreg(3,0x2ba47577);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x5b67c57e);
c.r(1, 0x3be5116c);
c.r(2, 0x75641561);
c.r(3, 0x1e679c9d);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0xe340fe05);
c.expectreg(1,0x3be5116c);
c.expectreg(2,0x75641561);
c.expectreg(3,0x1e679c9d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x6e9d5d63);
c.r(1, 0xf0be725);
c.r(2, 0x4bed0f33);
c.r(3, 0x7fb34b03);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0xe18febf9);
c.expectreg(1,0xf0be725);
c.expectreg(2,0x4bed0f33);
c.expectreg(3,0x7fb34b03);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x1f71eb2f);
c.r(1, 0x6de424cc);
c.r(2, 0x3a978fa8);
c.r(3, 0x1b42acdb);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0x19a64a92);
c.expectreg(1,0x6de424cc);
c.expectreg(2,0x3a978fa8);
c.expectreg(3,0x1b42acdb);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x67c0489d);
c.r(1, 0x42621c70);
c.r(2, 0x13c631c9);
c.r(3, 0x47c2fa57);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0x174ef553);
c.expectreg(1,0x42621c70);
c.expectreg(2,0x13c631c9);
c.expectreg(3,0x47c2fa57);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x73daaef);
c.r(1, 0x3c70d751);
c.r(2, 0x87789e1);
c.r(3, 0x33e13444);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0x19fc26b8);
c.expectreg(1,0x3c70d751);
c.expectreg(2,0x87789e1);
c.expectreg(3,0x33e13444);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x7346fe7a);
c.r(1, 0x3adc4c57);
c.r(2, 0x535a1e6b);
c.r(3, 0x499f1378);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0xf3c116f6);
c.expectreg(1,0x3adc4c57);
c.expectreg(2,0x535a1e6b);
c.expectreg(3,0x499f1378);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x3c5233fd);
c.r(1, 0x38dc8c36);
c.r(2, 0x4c9396cc);
c.r(3, 0x30dcda33);
c.x("shsub16 r0, r1, r2");
c.expectreg(0,0xf624fab5);
c.expectreg(1,0x38dc8c36);
c.expectreg(2,0x4c9396cc);
c.expectreg(3,0x30dcda33);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;
  c.cf();
c.r(0, 0x4e74d0b7);
c.r(1, 0x566a62fa);
c.r(2, 0x7e7b14cf);
c.r(3, 0x4893b785);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0xd8ef4e2b);
c.expectreg(1,0x566a62fa);
c.expectreg(2,0x7e7b14cf);
c.expectreg(3,0x4893b785);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x4bd93a83);
c.r(1, 0x2860c0cf);
c.r(2, 0x60ecadc4);
c.r(3, 0x35adcef7);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0xc874130b);
c.expectreg(1,0x2860c0cf);
c.expectreg(2,0x60ecadc4);
c.expectreg(3,0x35adcef7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(7);
c.cf();
//===========================
c.cf();
c.r(0, 0x123d2c2e);
c.r(1, 0x2b4123ec);
c.r(2, 0x24969748);
c.r(3, 0x77b26eee);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0x7ab8ca4);
c.expectreg(1,0x2b4123ec);
c.expectreg(2,0x24969748);
c.expectreg(3,0x77b26eee);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(14);
c.cf();
//===========================
c.cf();
c.r(0, 0xb2d53d);
c.r(1, 0x690cd5cb);
c.r(2, 0x37c8d30c);
c.r(3, 0x347653dd);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0x324402bf);
c.expectreg(1,0x690cd5cb);
c.expectreg(2,0x37c8d30c);
c.expectreg(3,0x347653dd);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(14);
c.cf();
//===========================
c.cf();
c.r(0, 0x2e7bd8);
c.r(1, 0x24db8a68);
c.r(2, 0x5a58f90e);
c.r(3, 0x4c41099d);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0xca83915a);
c.expectreg(1,0x24db8a68);
c.expectreg(2,0x5a58f90e);
c.expectreg(3,0x4c41099d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(1);
c.cf();
//===========================
c.cf();
c.r(0, 0x2efd5dfc);
c.r(1, 0x36de269c);
c.r(2, 0x15e77306);
c.r(3, 0xd59e2ee);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0x21f7b396);
c.expectreg(1,0x36de269c);
c.expectreg(2,0x15e77306);
c.expectreg(3,0xd59e2ee);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(8);
c.cf();
//===========================
c.cf();
c.r(0, 0x73a7b026);
c.r(1, 0x5c2201e7);
c.r(2, 0x628a962d);
c.r(3, 0x77af7a8d);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0xfa986bba);
c.expectreg(1,0x5c2201e7);
c.expectreg(2,0x628a962d);
c.expectreg(3,0x77af7a8d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(6);
c.cf();
//===========================
c.cf();
c.r(0, 0x6c5debc);
c.r(1, 0x13812cf7);
c.r(2, 0x76e6d650);
c.r(3, 0x553aaf73);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0x9d9b56a7);
c.expectreg(1,0x13812cf7);
c.expectreg(2,0x76e6d650);
c.expectreg(3,0x553aaf73);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(2);
c.cf();
//===========================
c.cf();
c.r(0, 0x69eb8ff1);
c.r(1, 0x7561eb1f);
c.r(2, 0x1dce66f9);
c.r(3, 0x35c4ca75);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0x58938526);
c.expectreg(1,0x7561eb1f);
c.expectreg(2,0x1dce66f9);
c.expectreg(3,0x35c4ca75);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(13);
c.cf();
//===========================
c.cf();
c.r(0, 0x1dc2abee);
c.r(1, 0x7ebb14bd);
c.r(2, 0x6b72996c);
c.r(3, 0x2fffd81d);
c.x("ssub8 r0, r1, r2");
c.expectreg(0,0x13497b51);
c.expectreg(1,0x7ebb14bd);
c.expectreg(2,0x6b72996c);
c.expectreg(3,0x2fffd81d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(10);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0x3cb57fd5);
c.r(1, 0x50a93918);
c.r(2, 0x7809c2e3);
c.r(3, 0x417e6eb7);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0xd8a07635);
c.expectreg(1,0x50a93918);
c.expectreg(2,0x7809c2e3);
c.expectreg(3,0x417e6eb7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x38de0fde);
c.r(1, 0x6b7df4f8);
c.r(2, 0x55341999);
c.r(3, 0x171b795f);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0x1649db5f);
c.expectreg(1,0x6b7df4f8);
c.expectreg(2,0x55341999);
c.expectreg(3,0x171b795f);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0xd618868);
c.r(1, 0x23b357f1);
c.r(2, 0x14e4bbb7);
c.r(3, 0xc41ee56);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0xecf9c3a);
c.expectreg(1,0x23b357f1);
c.expectreg(2,0x14e4bbb7);
c.expectreg(3,0xc41ee56);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x3e1808ff);
c.r(1, 0x35ef1160);
c.r(2, 0x31902c49);
c.r(3, 0x2dc51d0d);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0x45fe517);
c.expectreg(1,0x35ef1160);
c.expectreg(2,0x31902c49);
c.expectreg(3,0x2dc51d0d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x62811bc0);
c.r(1, 0x2bc87f1f);
c.r(2, 0x3c3ca7df);
c.r(3, 0x617553dc);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0xef8cd740);
c.expectreg(1,0x2bc87f1f);
c.expectreg(2,0x3c3ca7df);
c.expectreg(3,0x617553dc);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x770ad9f9);
c.r(1, 0x4c007ad6);
c.r(2, 0x24a7f86f);
c.r(3, 0x641a2325);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0x27598267);
c.expectreg(1,0x4c007ad6);
c.expectreg(2,0x24a7f86f);
c.expectreg(3,0x641a2325);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x3358e3b1);
c.r(1, 0x63462118);
c.r(2, 0x19ed7750);
c.r(3, 0x65a7286a);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0x4959a9c8);
c.expectreg(1,0x63462118);
c.expectreg(2,0x19ed7750);
c.expectreg(3,0x65a7286a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x10f26b3a);
c.r(1, 0x57f7e8de);
c.r(2, 0x7a8adcf7);
c.r(3, 0x4da7eb0f);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0xdd6d0be7);
c.expectreg(1,0x57f7e8de);
c.expectreg(2,0x7a8adcf7);
c.expectreg(3,0x4da7eb0f);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x28a121f7);
c.r(1, 0x72949fda);
c.r(2, 0xf2659c6);
c.r(3, 0x617f31d5);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0x636e4614);
c.expectreg(1,0x72949fda);
c.expectreg(2,0xf2659c6);
c.expectreg(3,0x617f31d5);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x5e1294d3);
c.r(1, 0x645a735f);
c.r(2, 0x789aab34);
c.r(3, 0x6b741d3b);
c.x("ssub16 r0, r1, r2");
c.expectreg(0,0xebc0c82b);
c.expectreg(1,0x645a735f);
c.expectreg(2,0x789aab34);
c.expectreg(3,0x6b741d3b);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0x7346d2bd);
c.r(1, 0x6af0042d);
c.r(2, 0x5ca312e2);
c.r(3, 0x49a5f79b);
c.x("shsax r0, r1, r2");
c.expectreg(0,0x2c073068);
c.expectreg(1,0x6af0042d);
c.expectreg(2,0x5ca312e2);
c.expectreg(3,0x49a5f79b);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x4a522ed3);
c.r(1, 0x5b4e3080);
c.r(2, 0x17a974ae);
c.r(3, 0x2e3f00b0);
c.x("shsax r0, r1, r2");
c.expectreg(0,0xf3502414);
c.expectreg(1,0x5b4e3080);
c.expectreg(2,0x17a974ae);
c.expectreg(3,0x2e3f00b0);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x209d6d74);
c.r(1, 0x72ef45d);
c.r(2, 0x5eca9618);
c.r(3, 0x2b1647db);
c.x("shsax r0, r1, r2");
c.expectreg(0,0x388b2993);
c.expectreg(1,0x72ef45d);
c.expectreg(2,0x5eca9618);
c.expectreg(3,0x2b1647db);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x51d5f5fa);
c.r(1, 0x7500fcff);
c.r(2, 0xe661ddf);
c.r(3, 0x24b6bc4d);
c.x("shsax r0, r1, r2");
c.expectreg(0,0x2b9005b2);
c.expectreg(1,0x7500fcff);
c.expectreg(2,0xe661ddf);
c.expectreg(3,0x24b6bc4d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x66b5915c);
c.r(1, 0x6dd05bec);
c.r(2, 0x55e4242e);
c.r(3, 0x448775f2);
c.x("shsax r0, r1, r2");
c.expectreg(0,0x24d158e8);
c.expectreg(1,0x6dd05bec);
c.expectreg(2,0x55e4242e);
c.expectreg(3,0x448775f2);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x1cfdbcf1);
c.r(1, 0x42998ff0);
c.r(2, 0x35efc31a);
c.r(3, 0x11973567);
c.x("shsax r0, r1, r2");
c.expectreg(0,0x3fbfe2ef);
c.expectreg(1,0x42998ff0);
c.expectreg(2,0x35efc31a);
c.expectreg(3,0x11973567);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x7a06d9ed);
c.r(1, 0x7b81fe34);
c.r(2, 0x1a064a5d);
c.r(3, 0x2c431881);
c.x("shsax r0, r1, r2");
c.expectreg(0,0x18920c1d);
c.expectreg(1,0x7b81fe34);
c.expectreg(2,0x1a064a5d);
c.expectreg(3,0x2c431881);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x51c39ee6);
c.r(1, 0x4cc3d593);
c.r(2, 0x3dc9ba23);
c.r(3, 0x450a71a3);
c.x("shsax r0, r1, r2");
c.expectreg(0,0x495009ae);
c.expectreg(1,0x4cc3d593);
c.expectreg(2,0x3dc9ba23);
c.expectreg(3,0x450a71a3);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x37b3d9c0);
c.r(1, 0x1a6ccd05);
c.r(2, 0xeb0693f);
c.r(3, 0x2060894);
c.x("shsax r0, r1, r2");
c.expectreg(0,0xd896edda);
c.expectreg(1,0x1a6ccd05);
c.expectreg(2,0xeb0693f);
c.expectreg(3,0x2060894);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x75bafd86);
c.r(1, 0x2659dded);
c.r(2, 0x30450944);
c.r(3, 0x16586afa);
c.x("shsax r0, r1, r2");
c.expectreg(0,0xe8a0719);
c.expectreg(1,0x2659dded);
c.expectreg(2,0x30450944);
c.expectreg(3,0x16586afa);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
return;

  c.cf();
c.r(0, 0x85f794e);
c.r(1, 0x558ce49b);
c.r(2, 0x765c439);
c.r(3, 0x5bad9d47);
c.x("ssax r0, r1, r2");
c.expectreg(0,0x9153ec00);
c.expectreg(1,0x558ce49b);
c.expectreg(2,0x765c439);
c.expectreg(3,0x5bad9d47);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0xa7c472d);
c.r(1, 0x5c4e005e);
c.r(2, 0x7e69a958);
c.r(3, 0x56a6465e);
c.x("ssax r0, r1, r2");
c.expectreg(0,0xb2f67ec7);
c.expectreg(1,0x5c4e005e);
c.expectreg(2,0x7e69a958);
c.expectreg(3,0x56a6465e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x14548def);
c.r(1, 0x393d2913);
c.r(2, 0x12aa9d99);
c.r(3, 0x464ed1c4);
c.x("ssax r0, r1, r2");
c.expectreg(0,0x9ba43bbd);
c.expectreg(1,0x393d2913);
c.expectreg(2,0x12aa9d99);
c.expectreg(3,0x464ed1c4);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x26ee9e69);
c.r(1, 0x319b177);
c.r(2, 0x6b1e5355);
c.r(3, 0x378ab9b7);
c.x("ssax r0, r1, r2");
c.expectreg(0,0xafc41c95);
c.expectreg(1,0x319b177);
c.expectreg(2,0x6b1e5355);
c.expectreg(3,0x378ab9b7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0xa5bbf4f);
c.r(1, 0x5858f60a);
c.r(2, 0x13909c12);
c.r(3, 0x1fdf8b32);
c.x("ssax r0, r1, r2");
c.expectreg(0,0xbc46099a);
c.expectreg(1,0x5858f60a);
c.expectreg(2,0x13909c12);
c.expectreg(3,0x1fdf8b32);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0xecdb450);
c.r(1, 0x25e533e3);
c.r(2, 0x222a6a4c);
c.r(3, 0x102a3cf2);
c.x("ssax r0, r1, r2");
c.expectreg(0,0xbb99560d);
c.expectreg(1,0x25e533e3);
c.expectreg(2,0x222a6a4c);
c.expectreg(3,0x102a3cf2);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x5ab1a0d);
c.r(1, 0x54d257c3);
c.r(2, 0x24f4a5a4);
c.r(3, 0x4de4b33);
c.x("ssax r0, r1, r2");
c.expectreg(0,0xaf2e7cb7);
c.expectreg(1,0x54d257c3);
c.expectreg(2,0x24f4a5a4);
c.expectreg(3,0x4de4b33);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x35205eae);
c.r(1, 0x2046afac);
c.r(2, 0x4954ebb3);
c.r(3, 0x3d7fd7fc);
c.x("ssax r0, r1, r2");
c.expectreg(0,0x3493f900);
c.expectreg(1,0x2046afac);
c.expectreg(2,0x4954ebb3);
c.expectreg(3,0x3d7fd7fc);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x75d39448);
c.r(1, 0x50baafec);
c.r(2, 0x192d7543);
c.r(3, 0x4fdb75);
c.x("ssax r0, r1, r2");
c.expectreg(0,0xdb77c919);
c.expectreg(1,0x50baafec);
c.expectreg(2,0x192d7543);
c.expectreg(3,0x4fdb75);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x2d08b04b);
c.r(1, 0x17971e9b);
c.r(2, 0x56f621d3);
c.r(3, 0x415d3e3a);
c.x("ssax r0, r1, r2");
c.expectreg(0,0xf5c47591);
c.expectreg(1,0x17971e9b);
c.expectreg(2,0x56f621d3);
c.expectreg(3,0x415d3e3a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0x738ff5e1);
c.r(1, 0x19dc19c6);
c.r(2, 0x15ff4b4d);
c.r(3, 0x79d6ae90);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x329401e3);
c.expectreg(1,0x19dc19c6);
c.expectreg(2,0x15ff4b4d);
c.expectreg(3,0x79d6ae90);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x3b0a4db6);
c.r(1, 0x4ae537d2);
c.r(2, 0x6c584fc9);
c.r(3, 0x38943608);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x4d57e5bd);
c.expectreg(1,0x4ae537d2);
c.expectreg(2,0x6c584fc9);
c.expectreg(3,0x38943608);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0xcdb8df7);
c.r(1, 0x42587a7b);
c.r(2, 0x2162cfa6);
c.r(3, 0x568666dd);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x8ff2c8c);
c.expectreg(1,0x42587a7b);
c.expectreg(2,0x2162cfa6);
c.expectreg(3,0x568666dd);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x2e8ce07d);
c.r(1, 0x79991af5);
c.r(2, 0x1867cd3d);
c.r(3, 0x633c348c);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x236b0147);
c.expectreg(1,0x79991af5);
c.expectreg(2,0x1867cd3d);
c.expectreg(3,0x633c348c);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x5adf4380);
c.r(1, 0x63b1678a);
c.r(2, 0x2c3eefe3);
c.r(3, 0x72fe32a6);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x29ca1da6);
c.expectreg(1,0x63b1678a);
c.expectreg(2,0x2c3eefe3);
c.expectreg(3,0x72fe32a6);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x5a251e4a);
c.r(1, 0x685d3950);
c.r(2, 0x3a8ee2ee);
c.r(3, 0x3c50f17d);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x25a5ff61);
c.expectreg(1,0x685d3950);
c.expectreg(2,0x3a8ee2ee);
c.expectreg(3,0x3c50f17d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x43a5ee97);
c.r(1, 0x7d08ff53);
c.r(2, 0x3d1aefa5);
c.r(3, 0x3bd613da);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x3656e11c);
c.expectreg(1,0x7d08ff53);
c.expectreg(2,0x3d1aefa5);
c.expectreg(3,0x3bd613da);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x4032a644);
c.r(1, 0x684d1840);
c.r(2, 0x42ef6c4e);
c.r(3, 0x33c29c25);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x6a4deaa8);
c.expectreg(1,0x684d1840);
c.expectreg(2,0x42ef6c4e);
c.expectreg(3,0x33c29c25);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x2293207);
c.r(1, 0x58eeb79b);
c.r(2, 0x2d994ab6);
c.r(3, 0x3d337fbd);
c.x("shasx r0, r1, r2");
c.expectreg(0,0x51d2c501);
c.expectreg(1,0x58eeb79b);
c.expectreg(2,0x2d994ab6);
c.expectreg(3,0x3d337fbd);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x23d3ef6e);
c.r(1, 0x19f19a7f);
c.r(2, 0x75c7b5c5);
c.r(3, 0x30af7d65);
c.x("shasx r0, r1, r2");
c.expectreg(0,0xe7db925c);
c.expectreg(1,0x19f19a7f);
c.expectreg(2,0x75c7b5c5);
c.expectreg(3,0x30af7d65);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
return;

  c.cf();
c.r(0, 0x481a9073);
c.r(1, 0x461c67a3);
c.r(2, 0x37e5dba3);
c.r(3, 0x2a302e37);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x3e0021a3);
c.expectreg(1,0x461c67a3);
c.expectreg(2,0x37e5dba3);
c.expectreg(3,0x2a302e37);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x78843b18);
c.r(1, 0x617f5da6);
c.r(2, 0x229012f3);
c.r(3, 0x2c31d20f);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x410737cc);
c.expectreg(1,0x617f5da6);
c.expectreg(2,0x229012f3);
c.expectreg(3,0x2c31d20f);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x903f064);
c.r(1, 0x6908e0bb);
c.r(2, 0xf8d1d14);
c.r(3, 0x6d1a2e68);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x3ccafee7);
c.expectreg(1,0x6908e0bb);
c.expectreg(2,0xf8d1d14);
c.expectreg(3,0x6d1a2e68);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x41043b04);
c.r(1, 0x3b9e8688);
c.r(2, 0x6488d10);
c.r(3, 0x4b4ea465);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x20f389cc);
c.expectreg(1,0x3b9e8688);
c.expectreg(2,0x6488d10);
c.expectreg(3,0x4b4ea465);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x6f92bdbf);
c.r(1, 0x65687e71);
c.r(2, 0x1f44ab78);
c.r(3, 0x4bd28dae);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x42561474);
c.expectreg(1,0x65687e71);
c.expectreg(2,0x1f44ab78);
c.expectreg(3,0x4bd28dae);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x79e7677b);
c.r(1, 0xf7abdb7);
c.r(2, 0x567e7623);
c.r(3, 0x8c84000);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x327c19ed);
c.expectreg(1,0xf7abdb7);
c.expectreg(2,0x567e7623);
c.expectreg(3,0x8c84000);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x1c95f666);
c.r(1, 0x2327cdce);
c.r(2, 0x60e4e2ce);
c.r(3, 0x19ffc79a);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x4105d7ce);
c.expectreg(1,0x2327cdce);
c.expectreg(2,0x60e4e2ce);
c.expectreg(3,0x19ffc79a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0xc486beb);
c.r(1, 0x3aace7a7);
c.r(2, 0x41330363);
c.r(3, 0x5462fc5e);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x3deff505);
c.expectreg(1,0x3aace7a7);
c.expectreg(2,0x41330363);
c.expectreg(3,0x5462fc5e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0xc94f4a);
c.r(1, 0x7918df07);
c.r(2, 0x7e932a95);
c.r(3, 0x794d8a62);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x7bd504ce);
c.expectreg(1,0x7918df07);
c.expectreg(2,0x7e932a95);
c.expectreg(3,0x794d8a62);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x5a983cad);
c.r(1, 0x21233d88);
c.r(2, 0x257f5c71);
c.r(3, 0x639c2d11);
c.x("shadd8 r0, r1, r2");
c.expectreg(0,0x23514cfc);
c.expectreg(1,0x21233d88);
c.expectreg(2,0x257f5c71);
c.expectreg(3,0x639c2d11);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
return;

  c.cf();
c.r(0, 0x5943541f);
c.r(1, 0x565314e8);
c.r(2, 0x5e7dba89);
c.r(3, 0x7a7e9468);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x5a68e7b8);
c.expectreg(1,0x565314e8);
c.expectreg(2,0x5e7dba89);
c.expectreg(3,0x7a7e9468);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x5424275f);
c.r(1, 0x76ef7411);
c.r(2, 0x1b3928d8);
c.r(3, 0x2ef598a);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x49144e74);
c.expectreg(1,0x76ef7411);
c.expectreg(2,0x1b3928d8);
c.expectreg(3,0x2ef598a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x46014faf);
c.r(1, 0x4fe9972a);
c.r(2, 0x6cca9f6);
c.r(3, 0x1ca331a7);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x2b5aa090);
c.expectreg(1,0x4fe9972a);
c.expectreg(2,0x6cca9f6);
c.expectreg(3,0x1ca331a7);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x546beba9);
c.r(1, 0x68829b74);
c.r(2, 0x335efa1b);
c.r(3, 0x33ddd157);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x4df0cac7);
c.expectreg(1,0x68829b74);
c.expectreg(2,0x335efa1b);
c.expectreg(3,0x33ddd157);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0xf4230f5);
c.r(1, 0x5117f5d0);
c.r(2, 0x47a2923);
c.r(3, 0x7cdaa69e);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x2ac80f79);
c.expectreg(1,0x5117f5d0);
c.expectreg(2,0x47a2923);
c.expectreg(3,0x7cdaa69e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x4d957735);
c.r(1, 0x6aa069aa);
c.r(2, 0x289a0e55);
c.r(3, 0x4123bb75);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x499d3bff);
c.expectreg(1,0x6aa069aa);
c.expectreg(2,0x289a0e55);
c.expectreg(3,0x4123bb75);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x55fa4bcd);
c.r(1, 0x788bf622);
c.r(2, 0x7a7371d0);
c.r(3, 0x39266e66);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x797f33f9);
c.expectreg(1,0x788bf622);
c.expectreg(2,0x7a7371d0);
c.expectreg(3,0x39266e66);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x24276e29);
c.r(1, 0x5a82b12);
c.r(2, 0xc5cc34a);
c.r(3, 0x7d6ac249);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x902f72e);
c.expectreg(1,0x5a82b12);
c.expectreg(2,0xc5cc34a);
c.expectreg(3,0x7d6ac249);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x5bfb3ffa);
c.r(1, 0x6ada7dd4);
c.r(2, 0x77e956b1);
c.r(3, 0x301f675a);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x71616a42);
c.expectreg(1,0x6ada7dd4);
c.expectreg(2,0x77e956b1);
c.expectreg(3,0x301f675a);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
c.cf();
c.r(0, 0x61c9f1e5);
c.r(1, 0x13227f89);
c.r(2, 0x330ec0e4);
c.r(3, 0x27cb4194);
c.x("shadd16 r0, r1, r2");
c.expectreg(0,0x23182036);
c.expectreg(1,0x13227f89);
c.expectreg(2,0x330ec0e4);
c.expectreg(3,0x27cb4194);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.cf();
return;

  c.cf();
c.ge(11);
c.r(0, 0x71fa80c8);
c.r(1, 0x9a10cc);
c.r(2, 0x44db1117);
c.r(3, 0x46f08eae);
c.x("sel r0, r1, r2");
c.expectreg(0,0xdb10cc);
c.expectreg(1,0x9a10cc);
c.expectreg(2,0x44db1117);
c.expectreg(3,0x46f08eae);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(11);
c.cf();
//===========================
c.cf();
c.ge(12);
c.r(0, 0x4a49f16f);
c.r(1, 0x509020c4);
c.r(2, 0x5a72f37e);
c.r(3, 0x75dbef5e);
c.x("sel r0, r1, r2");
c.expectreg(0,0x5090f37e);
c.expectreg(1,0x509020c4);
c.expectreg(2,0x5a72f37e);
c.expectreg(3,0x75dbef5e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.ge(8);
c.r(0, 0x708bb774);
c.r(1, 0x3a8b0bc6);
c.r(2, 0x29c2ac2b);
c.r(3, 0xa0752ba);
c.x("sel r0, r1, r2");
c.expectreg(0,0x3ac2ac2b);
c.expectreg(1,0x3a8b0bc6);
c.expectreg(2,0x29c2ac2b);
c.expectreg(3,0xa0752ba);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(8);
c.cf();
//===========================
c.cf();
c.ge(12);
c.r(0, 0x67b9fb6c);
c.r(1, 0x4917d418);
c.r(2, 0x4bcb67fa);
c.r(3, 0x7bd149ed);
c.x("sel r0, r1, r2");
c.expectreg(0,0x491767fa);
c.expectreg(1,0x4917d418);
c.expectreg(2,0x4bcb67fa);
c.expectreg(3,0x7bd149ed);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.ge(12);
c.r(0, 0x23dbe822);
c.r(1, 0x28d774c0);
c.r(2, 0x56b30816);
c.r(3, 0x129c9cfb);
c.x("sel r0, r1, r2");
c.expectreg(0,0x28d70816);
c.expectreg(1,0x28d774c0);
c.expectreg(2,0x56b30816);
c.expectreg(3,0x129c9cfb);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.ge(13);
c.r(0, 0x7b9d4ab4);
c.r(1, 0x4c191fd2);
c.r(2, 0x29be8d61);
c.r(3, 0x1ad934);
c.x("sel r0, r1, r2");
c.expectreg(0,0x4c198dd2);
c.expectreg(1,0x4c191fd2);
c.expectreg(2,0x29be8d61);
c.expectreg(3,0x1ad934);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(13);
c.cf();
//===========================
c.cf();
c.ge(11);
c.r(0, 0x712baf72);
c.r(1, 0x721559fd);
c.r(2, 0xddbca69);
c.r(3, 0x3606c089);
c.x("sel r0, r1, r2");
c.expectreg(0,0x72db59fd);
c.expectreg(1,0x721559fd);
c.expectreg(2,0xddbca69);
c.expectreg(3,0x3606c089);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(11);
c.cf();
//===========================
c.cf();
c.ge(7);
c.r(0, 0x797fc724);
c.r(1, 0x50b1f9);
c.r(2, 0x996096f);
c.r(3, 0x53f2baa2);
c.x("sel r0, r1, r2");
c.expectreg(0,0x950b1f9);
c.expectreg(1,0x50b1f9);
c.expectreg(2,0x996096f);
c.expectreg(3,0x53f2baa2);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(7);
c.cf();
//===========================
c.cf();
c.ge(0);
c.r(0, 0x344a021b);
c.r(1, 0x447e7216);
c.r(2, 0x30b7ad1d);
c.r(3, 0x5e0cae47);
c.x("sel r0, r1, r2");
c.expectreg(0,0x30b7ad1d);
c.expectreg(1,0x447e7216);
c.expectreg(2,0x30b7ad1d);
c.expectreg(3,0x5e0cae47);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.ge(0);
c.r(0, 0x4249c696);
c.r(1, 0x45c6a9b3);
c.r(2, 0x179d98e8);
c.r(3, 0xe152e90);
c.x("sel r0, r1, r2");
c.expectreg(0,0x179d98e8);
c.expectreg(1,0x45c6a9b3);
c.expectreg(2,0x179d98e8);
c.expectreg(3,0xe152e90);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
return;

  c.cf();
c.r(0, 0xdf32f06);
c.r(1, 0x63519463);
c.r(2, 0x6b570146);
c.r(3, 0x5c05f666);
c.x("sasx r0, r1, r2");
c.expectreg(0,0x6497290c);
c.expectreg(1,0x63519463);
c.expectreg(2,0x6b570146);
c.expectreg(3,0x5c05f666);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x12f258fa);
c.r(1, 0x47a7f2aa);
c.r(2, 0x7a291fd6);
c.r(3, 0x6e7ab25c);
c.x("sasx r0, r1, r2");
c.expectreg(0,0x677d7881);
c.expectreg(1,0x47a7f2aa);
c.expectreg(2,0x7a291fd6);
c.expectreg(3,0x6e7ab25c);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x4ce068ba);
c.r(1, 0x47f563f);
c.r(2, 0x94ebab);
c.r(3, 0x14de572);
c.x("sasx r0, r1, r2");
c.expectreg(0,0xf02a55ab);
c.expectreg(1,0x47f563f);
c.expectreg(2,0x94ebab);
c.expectreg(3,0x14de572);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(3);
c.cf();
//===========================
c.cf();
c.r(0, 0x7e8260f6);
c.r(1, 0x2a5187e2);
c.r(2, 0x69678e4a);
c.r(3, 0x4511380e);
c.x("sasx r0, r1, r2");
c.expectreg(0,0xb89b1e7b);
c.expectreg(1,0x2a5187e2);
c.expectreg(2,0x69678e4a);
c.expectreg(3,0x4511380e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(0);
c.cf();
c.cf();
c.r(0, 0x419f7d3c);
c.r(1, 0x7762c86f);
c.r(2, 0x5176e5ae);
c.r(3, 0x6fba637e);
c.x("sasx r0, r1, r2");
c.expectreg(0,0x5d1076f9);
c.expectreg(1,0x7762c86f);
c.expectreg(2,0x5176e5ae);
c.expectreg(3,0x6fba637e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x389c8a87);
c.r(1, 0x2298ef42);
c.r(2, 0x69ec66eb);
c.r(3, 0x6e2d3ca3);
c.x("sasx r0, r1, r2");
c.expectreg(0,0x89838556);
c.expectreg(1,0x2298ef42);
c.expectreg(2,0x69ec66eb);
c.expectreg(3,0x6e2d3ca3);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x46e0aa4c);
c.r(1, 0x46c7edf1);
c.r(2, 0x531313ee);
c.r(3, 0x2e374cb3);
c.x("sasx r0, r1, r2");
c.expectreg(0,0x5ab59ade);
c.expectreg(1,0x46c7edf1);
c.expectreg(2,0x531313ee);
c.expectreg(3,0x2e374cb3);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x7c5c0fea);
c.r(1, 0x4b9c92e4);
c.r(2, 0x7f97577a);
c.r(3, 0xa4f3ef0);
c.x("sasx r0, r1, r2");
c.expectreg(0,0xa316134d);
c.expectreg(1,0x4b9c92e4);
c.expectreg(2,0x7f97577a);
c.expectreg(3,0xa4f3ef0);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x2eee2747);
c.r(1, 0x6aee58c0);
c.r(2, 0x66553556);
c.r(3, 0x41e08041);
c.x("sasx r0, r1, r2");
c.expectreg(0,0xa044f26b);
c.expectreg(1,0x6aee58c0);
c.expectreg(2,0x66553556);
c.expectreg(3,0x41e08041);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x32964b6a);
c.r(1, 0x607e552c);
c.r(2, 0x305b329e);
c.r(3, 0x7f76b424);
c.x("sasx r0, r1, r2");
c.expectreg(0,0x931c24d1);
c.expectreg(1,0x607e552c);
c.expectreg(2,0x305b329e);
c.expectreg(3,0x7f76b424);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0xec8b025);
c.r(1, 0x6569a75d);
c.r(2, 0x6d2ec99c);
c.r(3, 0x53e37064);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0xd29770f9);
c.expectreg(1,0x6569a75d);
c.expectreg(2,0x6d2ec99c);
c.expectreg(3,0x53e37064);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x56216b62);
c.r(1, 0xc976527);
c.r(2, 0x30755bcd);
c.r(3, 0x6ae2ac56);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0x3c0cc0f4);
c.expectreg(1,0xc976527);
c.expectreg(2,0x30755bcd);
c.expectreg(3,0x6ae2ac56);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(14);
c.cf();
//===========================
c.cf();
c.r(0, 0x6a6d726d);
c.r(1, 0x1d072d20);
c.r(2, 0x5ffcf666);
c.r(3, 0x15f32fd6);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0x7c032386);
c.expectreg(1,0x1d072d20);
c.expectreg(2,0x5ffcf666);
c.expectreg(3,0x15f32fd6);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x408acf10);
c.r(1, 0x1910805e);
c.r(2, 0x43422993);
c.r(3, 0x40c07ad0);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0x5c52a9f1);
c.expectreg(1,0x1910805e);
c.expectreg(2,0x43422993);
c.expectreg(3,0x40c07ad0);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x71cdf045);
c.r(1, 0x7b8e1466);
c.r(2, 0x4e3d1417);
c.r(3, 0x7e33e02);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0xc9cb287d);
c.expectreg(1,0x7b8e1466);
c.expectreg(2,0x4e3d1417);
c.expectreg(3,0x7e33e02);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(11);
c.cf();
//===========================
c.cf();
c.r(0, 0x13aeaf4d);
c.r(1, 0x10e928e1);
c.r(2, 0x75c3552d);
c.r(3, 0x70d3dc71);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0x85ac7d0e);
c.expectreg(1,0x10e928e1);
c.expectreg(2,0x75c3552d);
c.expectreg(3,0x70d3dc71);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(11);
c.cf();
//===========================
c.cf();
c.r(0, 0x6f0e5660);
c.r(1, 0x5b0cb805);
c.r(2, 0x3c5c33fc);
c.r(3, 0x3e4e9857);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0x9768eb01);
c.expectreg(1,0x5b0cb805);
c.expectreg(2,0x3c5c33fc);
c.expectreg(3,0x3e4e9857);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(13);
c.cf();
//===========================
c.cf();
c.r(0, 0x301ed58b);
c.r(1, 0x50852e1c);
c.r(2, 0x29c11bac);
c.r(3, 0x3ee785b0);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0x794649c8);
c.expectreg(1,0x50852e1c);
c.expectreg(2,0x29c11bac);
c.expectreg(3,0x3ee785b0);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(10);
c.cf();
//===========================
c.cf();
c.r(0, 0x35eed579);
c.r(1, 0x16efe548);
c.r(2, 0x12caf614);
c.r(3, 0xc1040db);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0x28b9db5c);
c.expectreg(1,0x16efe548);
c.expectreg(2,0x12caf614);
c.expectreg(3,0xc1040db);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(9);
c.cf();
//===========================
c.cf();
c.r(0, 0x23874a6f);
c.r(1, 0x434051e1);
c.r(2, 0x76f2ed31);
c.r(3, 0xdf4bcdc);
c.x("sadd8 r0, r1, r2");
c.expectreg(0,0xb9323e12);
c.expectreg(1,0x434051e1);
c.expectreg(2,0x76f2ed31);
c.expectreg(3,0xdf4bcdc);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
return;

  c.cf();
c.r(0, 0x5bbb6eb0);
c.r(1, 0x7c1e1b19);
c.r(2, 0x4de25f28);
c.r(3, 0x179e6194);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0xca007a41);
c.expectreg(1,0x7c1e1b19);
c.expectreg(2,0x4de25f28);
c.expectreg(3,0x179e6194);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x7d4043a3);
c.r(1, 0x3d2954f5);
c.r(2, 0x6c037c46);
c.r(3, 0x11b78496);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0xa92cd13b);
c.expectreg(1,0x3d2954f5);
c.expectreg(2,0x6c037c46);
c.expectreg(3,0x11b78496);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x5a485613);
c.r(1, 0x1b810180);
c.r(2, 0xcd2417);
c.r(3, 0x3dededbe);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0x1c4e2597);
c.expectreg(1,0x1b810180);
c.expectreg(2,0xcd2417);
c.expectreg(3,0x3dededbe);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x1188605d);
c.r(1, 0x1d1462a4);
c.r(2, 0x3ba2a0d5);
c.r(3, 0x72a4ec3e);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0x58b60379);
c.expectreg(1,0x1d1462a4);
c.expectreg(2,0x3ba2a0d5);
c.expectreg(3,0x72a4ec3e);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x655ce707);
c.r(1, 0x5f6fb999);
c.r(2, 0x16d5012b);
c.r(3, 0x73616617);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0x7644bac4);
c.expectreg(1,0x5f6fb999);
c.expectreg(2,0x16d5012b);
c.expectreg(3,0x73616617);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x5bb9beb3);
c.r(1, 0x2fb7f133);
c.r(2, 0xbcb7c6b);
c.r(3, 0x275f26c0);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0x3b826d9e);
c.expectreg(1,0x2fb7f133);
c.expectreg(2,0xbcb7c6b);
c.expectreg(3,0x275f26c0);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x12cfb40f);
c.r(1, 0x13b33e74);
c.r(2, 0x755bf770);
c.r(3, 0x58a4d46d);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0x890e35e4);
c.expectreg(1,0x13b33e74);
c.expectreg(2,0x755bf770);
c.expectreg(3,0x58a4d46d);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
c.cf();
c.r(0, 0x723de671);
c.r(1, 0x442f8bbb);
c.r(2, 0x6afde886);
c.r(3, 0x4df95521);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0xaf2c7441);
c.expectreg(1,0x442f8bbb);
c.expectreg(2,0x6afde886);
c.expectreg(3,0x4df95521);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x404da6d4);
c.r(1, 0x38e047af);
c.r(2, 0x6597b6b5);
c.r(3, 0x3d8dea77);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0x9e77fe64);
c.expectreg(1,0x38e047af);
c.expectreg(2,0x6597b6b5);
c.expectreg(3,0x3d8dea77);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(12);
c.cf();
//===========================
c.cf();
c.r(0, 0x76099ca4);
c.r(1, 0x519b32fb);
c.r(2, 0x4f456f0d);
c.r(3, 0x5051f2b8);
c.x("sadd16 r0, r1, r2");
c.expectreg(0,0xa0e0a208);
c.expectreg(1,0x519b32fb);
c.expectreg(2,0x4f456f0d);
c.expectreg(3,0x5051f2b8);
c.expectN(0);
c.expectZ(0);
c.expectC(0);
c.expectV(0);
c.expectQ(0);
c.expectG(15);
c.cf();
//===========================
return;

  c.cf();
  c.r(0, 0x649fd74);
  c.r(1, 0x768709d6);
  c.r(2, 0x5af4fa68);
  c.r(3, 0x3e4d8d9e);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0x7c1f64ca);
  c.expectreg(1, 0x768709d6);
  c.expectreg(2, 0x5af4fa68);
  c.expectreg(3, 0x3e4d8d9e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6f908a5d);
  c.r(1, 0x63643256);
  c.r(2, 0x25dab438);
  c.r(3, 0x65bfa8f);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0x7fff5830);
  c.expectreg(1, 0x63643256);
  c.expectreg(2, 0x25dab438);
  c.expectreg(3, 0x65bfa8f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6c733355);
  c.r(1, 0x7312000);
  c.r(2, 0x5accf6b);
  c.r(3, 0x7a3332d8);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0x37c625ac);
  c.expectreg(1, 0x7312000);
  c.expectreg(2, 0x5accf6b);
  c.expectreg(3, 0x7a3332d8);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7b4b2963);
  c.r(1, 0x409a569c);
  c.r(2, 0x71435594);
  c.r(3, 0x17091eff);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0xeb067fff);
  c.expectreg(1, 0x409a569c);
  c.expectreg(2, 0x71435594);
  c.expectreg(3, 0x17091eff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x133ba9bd);
  c.r(1, 0x46b4dedc);
  c.r(2, 0x3b006861);
  c.r(3, 0x39ae4921);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0xde5319dc);
  c.expectreg(1, 0x46b4dedc);
  c.expectreg(2, 0x3b006861);
  c.expectreg(3, 0x39ae4921);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x70af6381);
  c.r(1, 0x600f1501);
  c.r(2, 0x466751f7);
  c.r(3, 0x35d737b9);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0xe185b68);
  c.expectreg(1, 0x600f1501);
  c.expectreg(2, 0x466751f7);
  c.expectreg(3, 0x35d737b9);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4119a4c6);
  c.r(1, 0x5f386d90);
  c.r(2, 0x400233a7);
  c.r(3, 0x20020b26);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0x2b917fff);
  c.expectreg(1, 0x5f386d90);
  c.expectreg(2, 0x400233a7);
  c.expectreg(3, 0x20020b26);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7aea3fba);
  c.r(1, 0x5c4b3fdc);
  c.r(2, 0x7a1f5db7);
  c.r(3, 0x1343d2e);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0xfe947fff);
  c.expectreg(1, 0x5c4b3fdc);
  c.expectreg(2, 0x7a1f5db7);
  c.expectreg(3, 0x1343d2e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x52d249b2);
  c.r(1, 0x5514581f);
  c.r(2, 0x3f81cacd);
  c.r(3, 0x4262d410);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0x7fff7fff);
  c.expectreg(1, 0x5514581f);
  c.expectreg(2, 0x3f81cacd);
  c.expectreg(3, 0x4262d410);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x38788a75);
  c.r(1, 0x655c7f05);
  c.r(2, 0x48bece9f);
  c.r(3, 0x24ebbdcb);
  c.x("qsax r0, r1, r2");
  c.expectreg(0, 0x7fff7fff);
  c.expectreg(1, 0x655c7f05);
  c.expectreg(2, 0x48bece9f);
  c.expectreg(3, 0x24ebbdcb);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x19533b64);
  c.r(1, 0x788df722);
  c.r(2, 0x5559e977);
  c.r(3, 0x3606222);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0xf88df723);
  c.expectreg(1, 0x788df722);
  c.expectreg(2, 0x5559e977);
  c.expectreg(3, 0x3606222);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x71ad12c1);
  c.r(1, 0x32d1ee69);
  c.r(2, 0x404fac85);
  c.r(3, 0x23cc82df);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0xb2d1ee6a);
  c.expectreg(1, 0x32d1ee69);
  c.expectreg(2, 0x404fac85);
  c.expectreg(3, 0x23cc82df);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x29ea92c5);
  c.r(1, 0x34c1520a);
  c.r(2, 0x3b17fbc8);
  c.r(3, 0x74fadfad);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0xbe915a7a);
  c.expectreg(1, 0x34c1520a);
  c.expectreg(2, 0x3b17fbc8);
  c.expectreg(3, 0x74fadfad);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x38371988);
  c.r(1, 0x2d81cb39);
  c.r(2, 0x6409921b);
  c.r(3, 0x34e8f1cd);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0xad81cb3a);
  c.expectreg(1, 0x2d81cb39);
  c.expectreg(2, 0x6409921b);
  c.expectreg(3, 0x34e8f1cd);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x2877d87d);
  c.r(1, 0x34db950e);
  c.r(2, 0x16a0d041);
  c.r(3, 0x74e7830a);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0x799f48c);
  c.expectreg(1, 0x34db950e);
  c.expectreg(2, 0x16a0d041);
  c.expectreg(3, 0x74e7830a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x64d364c3);
  c.r(1, 0x7594ceb4);
  c.r(2, 0x1519fece);
  c.r(3, 0x7784367b);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0x4b60d118);
  c.expectreg(1, 0x7594ceb4);
  c.expectreg(2, 0x1519fece);
  c.expectreg(3, 0x7784367b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x10eea361);
  c.r(1, 0x16e54c0f);
  c.r(2, 0x7a9f94b2);
  c.r(3, 0x47b5845c);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0x96e54c10);
  c.expectreg(1, 0x16e54c0f);
  c.expectreg(2, 0x7a9f94b2);
  c.expectreg(3, 0x47b5845c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x3da13b0b);
  c.r(1, 0x2617a296);
  c.r(2, 0x3ed123c);
  c.r(3, 0x56f4766f);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0x1e3d7e1e);
  c.expectreg(1, 0x2617a296);
  c.expectreg(2, 0x3ed123c);
  c.expectreg(3, 0x56f4766f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1ea599b8);
  c.r(1, 0x5946fbb3);
  c.r(2, 0x5a54d891);
  c.r(3, 0x1052ac7a);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0xd946fbb4);
  c.expectreg(1, 0x5946fbb3);
  c.expectreg(2, 0x5a54d891);
  c.expectreg(3, 0x1052ac7a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0xc18ea1c);
  c.r(1, 0x1aa48516);
  c.r(2, 0x341f2f59);
  c.r(3, 0x36037ce1);
  c.x("qdsub r0, r1, r2");
  c.expectreg(0, 0xb2662664);
  c.expectreg(1, 0x1aa48516);
  c.expectreg(2, 0x341f2f59);
  c.expectreg(3, 0x36037ce1);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;
  c.cf();
  c.r(0, 0x560b840c);
  c.r(1, 0x4fb8037e);
  c.r(2, 0x5fdbb216);
  c.r(3, 0x1ff01ff3);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x4fb8037e);
  c.expectreg(2, 0x5fdbb216);
  c.expectreg(3, 0x1ff01ff3);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x115e5e1b);
  c.r(1, 0x4c83aff8);
  c.r(2, 0x55117945);
  c.r(3, 0x19b2454c);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x4c83aff8);
  c.expectreg(2, 0x55117945);
  c.expectreg(3, 0x19b2454c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x42f6b04);
  c.r(1, 0x34b45841);
  c.r(2, 0x60651a2);
  c.r(3, 0x597af302);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x40c0fb85);
  c.expectreg(1, 0x34b45841);
  c.expectreg(2, 0x60651a2);
  c.expectreg(3, 0x597af302);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1d3a12d1);
  c.r(1, 0x39998865);
  c.r(2, 0x6bd478a3);
  c.r(3, 0x2572d2eb);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x39998865);
  c.expectreg(2, 0x6bd478a3);
  c.expectreg(3, 0x2572d2eb);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x45f1ae27);
  c.r(1, 0x6185c701);
  c.r(2, 0x6a1c4ba3);
  c.r(3, 0x1a1a7baf);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x6185c701);
  c.expectreg(2, 0x6a1c4ba3);
  c.expectreg(3, 0x1a1a7baf);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x5fef706);
  c.r(1, 0x7ca73e7c);
  c.r(2, 0x2ef32f7a);
  c.r(3, 0x3bf92d67);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x7ca73e7c);
  c.expectreg(2, 0x2ef32f7a);
  c.expectreg(3, 0x3bf92d67);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0xac963bd);
  c.r(1, 0x7e60b646);
  c.r(2, 0x2f7b0c6);
  c.r(3, 0x3b802431);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x7e60b646);
  c.expectreg(2, 0x2f7b0c6);
  c.expectreg(3, 0x3b802431);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x2a1174f);
  c.r(1, 0x341253a4);
  c.r(2, 0x2931cbcc);
  c.r(3, 0x58ac9b5c);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x341253a4);
  c.expectreg(2, 0x2931cbcc);
  c.expectreg(3, 0x58ac9b5c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x3ca5722);
  c.r(1, 0x90d7de2);
  c.r(2, 0x789cbb4f);
  c.r(3, 0x1528b53e);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x90d7de2);
  c.expectreg(2, 0x789cbb4f);
  c.expectreg(3, 0x1528b53e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x55912ddb);
  c.r(1, 0x4dae3494);
  c.r(2, 0x2edafa8a);
  c.r(3, 0x59c098df);
  c.x("qdadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x4dae3494);
  c.expectreg(2, 0x2edafa8a);
  c.expectreg(3, 0x59c098df);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  return;

  c.cf();
  c.r(0, 0x352e8818);
  c.r(1, 0x197120cc);
  c.r(2, 0x3f3868d8);
  c.r(3, 0x2d61fe53);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0x7fffe194);
  c.expectreg(1, 0x197120cc);
  c.expectreg(2, 0x3f3868d8);
  c.expectreg(3, 0x2d61fe53);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x78c9f0f0);
  c.r(1, 0x62c6cf1c);
  c.r(2, 0x4706e311);
  c.r(3, 0x34187565);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0x45d78816);
  c.expectreg(1, 0x62c6cf1c);
  c.expectreg(2, 0x4706e311);
  c.expectreg(3, 0x34187565);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x2dc71576);
  c.r(1, 0x7f26fce);
  c.r(2, 0x3e61a407);
  c.r(3, 0x33905302);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0xabf9316d);
  c.expectreg(1, 0x7f26fce);
  c.expectreg(2, 0x3e61a407);
  c.expectreg(3, 0x33905302);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4d36bb39);
  c.r(1, 0x5c96d82d);
  c.r(2, 0x62c8af9);
  c.r(3, 0x69b339d5);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0xe78fd201);
  c.expectreg(1, 0x5c96d82d);
  c.expectreg(2, 0x62c8af9);
  c.expectreg(3, 0x69b339d5);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x308a2036);
  c.r(1, 0x7292448b);
  c.r(2, 0x73144bd9);
  c.r(3, 0x75098bbf);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0x7fffd177);
  c.expectreg(1, 0x7292448b);
  c.expectreg(2, 0x73144bd9);
  c.expectreg(3, 0x75098bbf);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x14dc6a4c);
  c.r(1, 0x16136859);
  c.r(2, 0x2ac6f308);
  c.r(3, 0xa9a39b4);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0x91b3d93);
  c.expectreg(1, 0x16136859);
  c.expectreg(2, 0x2ac6f308);
  c.expectreg(3, 0xa9a39b4);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x70223e4a);
  c.r(1, 0x11c857f6);
  c.r(2, 0x60549d42);
  c.r(3, 0x20ffb5a4);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0xaf0af7a2);
  c.expectreg(1, 0x11c857f6);
  c.expectreg(2, 0x60549d42);
  c.expectreg(3, 0x20ffb5a4);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xbee6641);
  c.r(1, 0x4262c65a);
  c.r(2, 0x2370df6e);
  c.r(3, 0x411cee59);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0x21d0a2ea);
  c.expectreg(1, 0x4262c65a);
  c.expectreg(2, 0x2370df6e);
  c.expectreg(3, 0x411cee59);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5bd3e727);
  c.r(1, 0x62a94847);
  c.r(2, 0x6e7eecac);
  c.r(3, 0x549dd817);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0x4f55d9c9);
  c.expectreg(1, 0x62a94847);
  c.expectreg(2, 0x6e7eecac);
  c.expectreg(3, 0x549dd817);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x45701763);
  c.r(1, 0x3585cfbe);
  c.r(2, 0x8b64d7c);
  c.r(3, 0x73372cd9);
  c.x("qasx r0, r1, r2");
  c.expectreg(0, 0x7fffc708);
  c.expectreg(1, 0x3585cfbe);
  c.expectreg(2, 0x8b64d7c);
  c.expectreg(3, 0x73372cd9);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x2dcb99a1);
  c.r(1, 0x44d1760c);
  c.r(2, 0x39f1a083);
  c.r(3, 0x3512d959);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xbe07f7f);
  c.expectreg(1, 0x44d1760c);
  c.expectreg(2, 0x39f1a083);
  c.expectreg(3, 0x3512d959);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xd870ef);
  c.r(1, 0x469cbd0d);
  c.r(2, 0x7a40e010);
  c.r(3, 0x304b65d0);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xcc80ddfd);
  c.expectreg(1, 0x469cbd0d);
  c.expectreg(2, 0x7a40e010);
  c.expectreg(3, 0x304b65d0);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x58c38299);
  c.r(1, 0x4f5c3703);
  c.r(2, 0x6052b8bf);
  c.r(3, 0x7a87eac8);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xef0a7f44);
  c.expectreg(1, 0x4f5c3703);
  c.expectreg(2, 0x6052b8bf);
  c.expectreg(3, 0x7a87eac8);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4b4fa3bf);
  c.r(1, 0x63580ef9);
  c.r(2, 0x6ef7f35e);
  c.r(3, 0x229b367f);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xf5611b9b);
  c.expectreg(1, 0x63580ef9);
  c.expectreg(2, 0x6ef7f35e);
  c.expectreg(3, 0x229b367f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x52615a3e);
  c.r(1, 0x166545c);
  c.r(2, 0x7bb91fb);
  c.r(3, 0x7d5b70dc);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xfa7f7f61);
  c.expectreg(1, 0x166545c);
  c.expectreg(2, 0x7bb91fb);
  c.expectreg(3, 0x7d5b70dc);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4a57d856);
  c.r(1, 0x3be926ba);
  c.r(2, 0x5a544638);
  c.r(3, 0x3ec5a01b);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xe195e082);
  c.expectreg(1, 0x3be926ba);
  c.expectreg(2, 0x5a544638);
  c.expectreg(3, 0x3ec5a01b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x119edf41);
  c.r(1, 0x24bbd2d1);
  c.r(2, 0x32a22c4d);
  c.r(3, 0x3ce3adac);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xf219a684);
  c.expectreg(1, 0x24bbd2d1);
  c.expectreg(2, 0x32a22c4d);
  c.expectreg(3, 0x3ce3adac);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x415a47cc);
  c.r(1, 0x6f12175);
  c.r(2, 0x30bb8cd0);
  c.r(3, 0x6f25e16e);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xd6367f7f);
  c.expectreg(1, 0x6f12175);
  c.expectreg(2, 0x30bb8cd0);
  c.expectreg(3, 0x6f25e16e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4bc29782);
  c.r(1, 0x6aad2d54);
  c.r(2, 0x2438bac7);
  c.r(3, 0x4c9b0871);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0x4680737f);
  c.expectreg(1, 0x6aad2d54);
  c.expectreg(2, 0x2438bac7);
  c.expectreg(3, 0x4c9b0871);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3149ea61);
  c.r(1, 0x1e799ad7);
  c.r(2, 0x7ce66e41);
  c.r(3, 0xa0d6cfa);
  c.x("qsub8 r0, r1, r2");
  c.expectreg(0, 0xa27f8096);
  c.expectreg(1, 0x1e799ad7);
  c.expectreg(2, 0x7ce66e41);
  c.expectreg(3, 0xa0d6cfa);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;
  c.cf();
  c.r(0, 0x2fccc9fd);
  c.r(1, 0x25574822);
  c.r(2, 0x41fd00bc);
  c.r(3, 0xde8df61);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0xe35a4766);
  c.expectreg(1, 0x25574822);
  c.expectreg(2, 0x41fd00bc);
  c.expectreg(3, 0xde8df61);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x752c79eb);
  c.r(1, 0x38c13a17);
  c.r(2, 0x1e195fc8);
  c.r(3, 0x48da3158);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0x1aa8da4f);
  c.expectreg(1, 0x38c13a17);
  c.expectreg(2, 0x1e195fc8);
  c.expectreg(3, 0x48da3158);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7b24bcb3);
  c.r(1, 0x40301f31);
  c.r(2, 0xebe6db7);
  c.r(3, 0x24c3833d);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0x3172b17a);
  c.expectreg(1, 0x40301f31);
  c.expectreg(2, 0xebe6db7);
  c.expectreg(3, 0x24c3833d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x504d909c);
  c.r(1, 0x6ae120f5);
  c.r(2, 0x5a7b65e6);
  c.r(3, 0x47eadc0);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0x1066bb0f);
  c.expectreg(1, 0x6ae120f5);
  c.expectreg(2, 0x5a7b65e6);
  c.expectreg(3, 0x47eadc0);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7d088b03);
  c.r(1, 0x2362f119);
  c.r(2, 0x1242b84d);
  c.r(3, 0x2965fe9c);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0x112038cc);
  c.expectreg(1, 0x2362f119);
  c.expectreg(2, 0x1242b84d);
  c.expectreg(3, 0x2965fe9c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x717ee9d2);
  c.r(1, 0x487b5d47);
  c.r(2, 0xe79c202);
  c.r(3, 0x78807adc);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0x3a027fff);
  c.expectreg(1, 0x487b5d47);
  c.expectreg(2, 0xe79c202);
  c.expectreg(3, 0x78807adc);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x62427f2);
  c.r(1, 0x462a9845);
  c.r(2, 0x6e9881ed);
  c.r(3, 0x71e09d25);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0xd7921658);
  c.expectreg(1, 0x462a9845);
  c.expectreg(2, 0x6e9881ed);
  c.expectreg(3, 0x71e09d25);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x56e67bef);
  c.r(1, 0x3e4c1f9c);
  c.r(2, 0x7b2a3dd8);
  c.r(3, 0x6b345ed);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0xc322e1c4);
  c.expectreg(1, 0x3e4c1f9c);
  c.expectreg(2, 0x7b2a3dd8);
  c.expectreg(3, 0x6b345ed);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x63a367be);
  c.r(1, 0x3d273e95);
  c.r(2, 0x149c254e);
  c.r(3, 0x58cfe1a9);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0x288b1947);
  c.expectreg(1, 0x3d273e95);
  c.expectreg(2, 0x149c254e);
  c.expectreg(3, 0x58cfe1a9);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x75e878ac);
  c.r(1, 0x32b58517);
  c.r(2, 0x21aa1301);
  c.r(3, 0x710d355f);
  c.x("qsub16 r0, r1, r2");
  c.expectreg(0, 0x110b8000);
  c.expectreg(1, 0x32b58517);
  c.expectreg(2, 0x21aa1301);
  c.expectreg(3, 0x710d355f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x576867ae);
  c.r(1, 0x1cbf4766);
  c.r(2, 0x475328eb);
  c.r(3, 0x6e49e893);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0xd56c1e7b);
  c.expectreg(1, 0x1cbf4766);
  c.expectreg(2, 0x475328eb);
  c.expectreg(3, 0x6e49e893);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x74fede);
  c.r(1, 0x61cced9a);
  c.r(2, 0xc48c175);
  c.r(3, 0x474a3847);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0x55842c25);
  c.expectreg(1, 0x61cced9a);
  c.expectreg(2, 0xc48c175);
  c.expectreg(3, 0x474a3847);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x64922712);
  c.r(1, 0x3f267e20);
  c.r(2, 0x601593f4);
  c.r(3, 0x3f0a000f);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0xdf10ea2c);
  c.expectreg(1, 0x3f267e20);
  c.expectreg(2, 0x601593f4);
  c.expectreg(3, 0x3f0a000f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x731ea86c);
  c.r(1, 0x60383e1f);
  c.r(2, 0x111b28fc);
  c.r(3, 0x170a05b1);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0x4f1d1523);
  c.expectreg(1, 0x60383e1f);
  c.expectreg(2, 0x111b28fc);
  c.expectreg(3, 0x170a05b1);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7890e6dc);
  c.r(1, 0x6f0e40c3);
  c.r(2, 0x729c16d0);
  c.r(3, 0x6eb703d);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0xfc7229f3);
  c.expectreg(1, 0x6f0e40c3);
  c.expectreg(2, 0x729c16d0);
  c.expectreg(3, 0x6eb703d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x33b17607);
  c.r(1, 0x71822e02);
  c.r(2, 0x2b0edad8);
  c.r(3, 0x88b6b6c);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0x4673532a);
  c.expectreg(1, 0x71822e02);
  c.expectreg(2, 0x2b0edad8);
  c.expectreg(3, 0x88b6b6c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5a9bbe36);
  c.r(1, 0x748f28fa);
  c.r(2, 0x45fb1325);
  c.r(3, 0x7f3434dc);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0x2e9415d5);
  c.expectreg(1, 0x748f28fa);
  c.expectreg(2, 0x45fb1325);
  c.expectreg(3, 0x7f3434dc);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1ff713bf);
  c.r(1, 0x6c347592);
  c.r(2, 0x5f3953f2);
  c.r(3, 0x775f7b6d);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0xcfb21a0);
  c.expectreg(1, 0x6c347592);
  c.expectreg(2, 0x5f3953f2);
  c.expectreg(3, 0x775f7b6d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x8f3bcf9);
  c.r(1, 0x268c7cdd);
  c.r(2, 0x65a96401);
  c.r(3, 0x968bbd7);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0xc0e318dc);
  c.expectreg(1, 0x268c7cdd);
  c.expectreg(2, 0x65a96401);
  c.expectreg(3, 0x968bbd7);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x8596a77);
  c.r(1, 0x71f22576);
  c.r(2, 0x50b2f41f);
  c.r(3, 0x6ceb9189);
  c.x("qsub r0, r1, r2");
  c.expectreg(0, 0x213f3157);
  c.expectreg(1, 0x71f22576);
  c.expectreg(2, 0x50b2f41f);
  c.expectreg(3, 0x6ceb9189);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x61f823dc);
  c.r(1, 0x72314873);
  c.r(2, 0x1c5c672b);
  c.r(3, 0x5746bb8e);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x7f7f7f7f);
  c.expectreg(1, 0x72314873);
  c.expectreg(2, 0x1c5c672b);
  c.expectreg(3, 0x5746bb8e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x20bab652);
  c.r(1, 0x21e9ff99);
  c.r(2, 0x1f938452);
  c.r(3, 0x3bbd816b);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x408083eb);
  c.expectreg(1, 0x21e9ff99);
  c.expectreg(2, 0x1f938452);
  c.expectreg(3, 0x3bbd816b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7e00dafd);
  c.r(1, 0x58052c4b);
  c.r(2, 0x5a55efc0);
  c.r(3, 0x4c30ca5b);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x7f5a1b0b);
  c.expectreg(1, 0x58052c4b);
  c.expectreg(2, 0x5a55efc0);
  c.expectreg(3, 0x4c30ca5b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3d69de83);
  c.r(1, 0x67a704fb);
  c.r(2, 0x3efb7064);
  c.r(3, 0x6013a998);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x7fa2745f);
  c.expectreg(1, 0x67a704fb);
  c.expectreg(2, 0x3efb7064);
  c.expectreg(3, 0x6013a998);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6ad957d9);
  c.r(1, 0x23d3b315);
  c.r(2, 0x30eb3c58);
  c.r(3, 0x151fcccf);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x53beef6d);
  c.expectreg(1, 0x23d3b315);
  c.expectreg(2, 0x30eb3c58);
  c.expectreg(3, 0x151fcccf);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xc1c1c59);
  c.r(1, 0x6271bd92);
  c.r(2, 0x61c66060);
  c.r(3, 0x475f178a);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x7f371df2);
  c.expectreg(1, 0x6271bd92);
  c.expectreg(2, 0x61c66060);
  c.expectreg(3, 0x475f178a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5f7f1d75);
  c.r(1, 0x21e0c71f);
  c.r(2, 0x2b0b783c);
  c.r(3, 0x4a507a45);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x4ceb3f5b);
  c.expectreg(1, 0x21e0c71f);
  c.expectreg(2, 0x2b0b783c);
  c.expectreg(3, 0x4a507a45);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x52598197);
  c.r(1, 0x15a77b2e);
  c.r(2, 0x238062b8);
  c.r(3, 0x3451a573);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x38807fe6);
  c.expectreg(1, 0x15a77b2e);
  c.expectreg(2, 0x238062b8);
  c.expectreg(3, 0x3451a573);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7d8c3a1);
  c.r(1, 0x3fdcc9e4);
  c.r(2, 0xb986101);
  c.r(3, 0x289379f3);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x4a802ae5);
  c.expectreg(1, 0x3fdcc9e4);
  c.expectreg(2, 0xb986101);
  c.expectreg(3, 0x289379f3);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x61c6c97d);
  c.r(1, 0x2b2be554);
  c.r(2, 0x6450fb5e);
  c.r(3, 0x5fc7a47b);
  c.x("qadd8 r0, r1, r2");
  c.expectreg(0, 0x7f7be07f);
  c.expectreg(1, 0x2b2be554);
  c.expectreg(2, 0x6450fb5e);
  c.expectreg(3, 0x5fc7a47b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x990e21d);
  c.r(1, 0x4400f137);
  c.r(2, 0xcc0d521);
  c.r(3, 0x66c8d159);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x50c0c658);
  c.expectreg(1, 0x4400f137);
  c.expectreg(2, 0xcc0d521);
  c.expectreg(3, 0x66c8d159);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x24998a74);
  c.r(1, 0x27878498);
  c.r(2, 0x48a34dd);
  c.r(3, 0x65553fdc);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x2c11b975);
  c.expectreg(1, 0x27878498);
  c.expectreg(2, 0x48a34dd);
  c.expectreg(3, 0x65553fdc);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6157d714);
  c.r(1, 0x36372b09);
  c.r(2, 0x52edca4);
  c.r(3, 0x3850ad0d);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x3b6507ad);
  c.expectreg(1, 0x36372b09);
  c.expectreg(2, 0x52edca4);
  c.expectreg(3, 0x3850ad0d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x568de694);
  c.r(1, 0x628fe967);
  c.r(2, 0x5e5c91f8);
  c.r(3, 0x2fc55245);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x7fff8000);
  c.expectreg(1, 0x628fe967);
  c.expectreg(2, 0x5e5c91f8);
  c.expectreg(3, 0x2fc55245);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x45bbf0fe);
  c.r(1, 0x4035c370);
  c.r(2, 0x4b9879e5);
  c.r(3, 0x4234284d);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x7fff3d55);
  c.expectreg(1, 0x4035c370);
  c.expectreg(2, 0x4b9879e5);
  c.expectreg(3, 0x4234284d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xa5926c1);
  c.r(1, 0x3fffc486);
  c.r(2, 0x60042ce5);
  c.r(3, 0x35e21ad3);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x7ffff16b);
  c.expectreg(1, 0x3fffc486);
  c.expectreg(2, 0x60042ce5);
  c.expectreg(3, 0x35e21ad3);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x2c435c2b);
  c.r(1, 0x1ea2a974);
  c.r(2, 0x520e5ba1);
  c.r(3, 0x6e8153a6);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x70b00515);
  c.expectreg(1, 0x1ea2a974);
  c.expectreg(2, 0x520e5ba1);
  c.expectreg(3, 0x6e8153a6);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x2585c606);
  c.r(1, 0x5903401e);
  c.r(2, 0x67932abe);
  c.r(3, 0x2f16a823);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x7fff6adc);
  c.expectreg(1, 0x5903401e);
  c.expectreg(2, 0x67932abe);
  c.expectreg(3, 0x2f16a823);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1d043155);
  c.r(1, 0x7453ffdf);
  c.r(2, 0x15df797c);
  c.r(3, 0x419dbbc9);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x7fff795b);
  c.expectreg(1, 0x7453ffdf);
  c.expectreg(2, 0x15df797c);
  c.expectreg(3, 0x419dbbc9);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1bdb8477);
  c.r(1, 0x1a69ae5a);
  c.r(2, 0x26f2fba5);
  c.r(3, 0x7d335b8b);
  c.x("qadd16 r0, r1, r2");
  c.expectreg(0, 0x415ba9ff);
  c.expectreg(1, 0x1a69ae5a);
  c.expectreg(2, 0x26f2fba5);
  c.expectreg(3, 0x7d335b8b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x467ea3e7);
  c.r(1, 0x148db644);
  c.r(2, 0x1862c50e);
  c.r(3, 0x3a9b86d2);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x2cf07b52);
  c.expectreg(1, 0x148db644);
  c.expectreg(2, 0x1862c50e);
  c.expectreg(3, 0x3a9b86d2);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4b59a3c6);
  c.r(1, 0x18023d8);
  c.r(2, 0x109bc947);
  c.r(3, 0x257d66d8);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x121bed1f);
  c.expectreg(1, 0x18023d8);
  c.expectreg(2, 0x109bc947);
  c.expectreg(3, 0x257d66d8);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xee2538c);
  c.r(1, 0x85fce6a);
  c.r(2, 0x4394818e);
  c.r(3, 0x3068fe1c);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x4bf44ff8);
  c.expectreg(1, 0x85fce6a);
  c.expectreg(2, 0x4394818e);
  c.expectreg(3, 0x3068fe1c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x600d3eed);
  c.r(1, 0x77641b1d);
  c.r(2, 0x601f1365);
  c.r(3, 0xe4e3c5d);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x7fffffff);
  c.expectreg(1, 0x77641b1d);
  c.expectreg(2, 0x601f1365);
  c.expectreg(3, 0xe4e3c5d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x1ed02746);
  c.r(1, 0xeaa3013);
  c.r(2, 0x219fff75);
  c.r(3, 0x862c65a);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x304a2f88);
  c.expectreg(1, 0xeaa3013);
  c.expectreg(2, 0x219fff75);
  c.expectreg(3, 0x862c65a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x2857c121);
  c.r(1, 0x4e93a99b);
  c.r(2, 0x30c3909f);
  c.r(3, 0x5e7a495e);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x7f573a3a);
  c.expectreg(1, 0x4e93a99b);
  c.expectreg(2, 0x30c3909f);
  c.expectreg(3, 0x5e7a495e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x633011ff);
  c.r(1, 0xe641bfb);
  c.r(2, 0x1b57f2ab);
  c.r(3, 0x4e8e83ab);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x29bc0ea6);
  c.expectreg(1, 0xe641bfb);
  c.expectreg(2, 0x1b57f2ab);
  c.expectreg(3, 0x4e8e83ab);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xb62d5e8);
  c.r(1, 0x3c004d10);
  c.r(2, 0x318399e9);
  c.r(3, 0x51e179cf);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x6d83e6f9);
  c.expectreg(1, 0x3c004d10);
  c.expectreg(2, 0x318399e9);
  c.expectreg(3, 0x51e179cf);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x508e0354);
  c.r(1, 0x49e65ef7);
  c.r(2, 0xc7d00a1);
  c.r(3, 0x1be7a71a);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x56635f98);
  c.expectreg(1, 0x49e65ef7);
  c.expectreg(2, 0xc7d00a1);
  c.expectreg(3, 0x1be7a71a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4b6682d0);
  c.r(1, 0x1d18c9e8);
  c.r(2, 0x41650df2);
  c.r(3, 0x5a48d65c);
  c.x("qadd r0, r1, r2");
  c.expectreg(0, 0x5e7dd7da);
  c.expectreg(1, 0x1d18c9e8);
  c.expectreg(2, 0x41650df2);
  c.expectreg(3, 0x5a48d65c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;
  c.cf();
  c.r(0, 0x697ee0fc);
  c.r(1, 0x1e3bd484);
  c.r(2, 0xbf1b2f5);
  c.r(3, 0x4e9db03d);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x5006b8b1);
  c.expectreg(1, 0x1e3bd484);
  c.expectreg(2, 0xbf1b2f5);
  c.expectreg(3, 0x4e9db03d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3c0b38f7);
  c.r(1, 0x6f907463);
  c.r(2, 0x675bb42f);
  c.r(3, 0x2e257842);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x5b303f6f);
  c.expectreg(1, 0x6f907463);
  c.expectreg(2, 0x675bb42f);
  c.expectreg(3, 0x2e257842);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6b40e06d);
  c.r(1, 0x76af1e14);
  c.r(2, 0x4cf6bb06);
  c.r(3, 0x183f90d4);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x3bed9a08);
  c.expectreg(1, 0x76af1e14);
  c.expectreg(2, 0x4cf6bb06);
  c.expectreg(3, 0x183f90d4);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1a58f665);
  c.r(1, 0x793a002e);
  c.r(2, 0x5d9b4b5c);
  c.r(3, 0x6df57c58);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x9a48f486);
  c.expectreg(1, 0x793a002e);
  c.expectreg(2, 0x5d9b4b5c);
  c.expectreg(3, 0x6df57c58);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x6f46bb58);
  c.r(1, 0x3805e852);
  c.r(2, 0x46c7ee2b);
  c.r(3, 0x71d05356);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x814d7d74);
  c.expectreg(1, 0x3805e852);
  c.expectreg(2, 0x46c7ee2b);
  c.expectreg(3, 0x71d05356);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x63793a54);
  c.r(1, 0x286d6402);
  c.r(2, 0x1862fa4b);
  c.r(3, 0x1b4b9f80);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x1f255ac0);
  c.expectreg(1, 0x286d6402);
  c.expectreg(2, 0x1862fa4b);
  c.expectreg(3, 0x1b4b9f80);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x376c8c19);
  c.r(1, 0x156cd75e);
  c.r(2, 0x532b2fed);
  c.r(3, 0x741eaa4e);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x7b148d69);
  c.expectreg(1, 0x156cd75e);
  c.expectreg(2, 0x532b2fed);
  c.expectreg(3, 0x741eaa4e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x12da352d);
  c.r(1, 0x1b711dfc);
  c.r(2, 0x138b3e27);
  c.r(3, 0x7c591629);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x7e7161cd);
  c.expectreg(1, 0x1b711dfc);
  c.expectreg(2, 0x138b3e27);
  c.expectreg(3, 0x7c591629);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x39acf281);
  c.r(1, 0x1f7cf11c);
  c.r(2, 0x4af6c666);
  c.r(3, 0x75b82b78);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x7ef08b39);
  c.expectreg(1, 0x1f7cf11c);
  c.expectreg(2, 0x4af6c666);
  c.expectreg(3, 0x75b82b78);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xf0d657f);
  c.r(1, 0x32527a95);
  c.r(2, 0x23dda3ba);
  c.r(3, 0x7a4e45ec);
  c.x("smlawt r0, r1, r2, r3");
  c.expectreg(0, 0x815afde2);
  c.expectreg(1, 0x32527a95);
  c.expectreg(2, 0x23dda3ba);
  c.expectreg(3, 0x7a4e45ec);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  return;

  c.cf();
  c.r(0, 0x7db9c109);
  c.r(1, 0x2986c5d8);
  c.r(2, 0x2fac204d);
  c.r(3, 0x49248eee);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x4e61e532);
  c.expectreg(1, 0x2986c5d8);
  c.expectreg(2, 0x2fac204d);
  c.expectreg(3, 0x49248eee);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x955dd83);
  c.r(1, 0x3fa2c1f4);
  c.r(2, 0x6bd2b657);
  c.r(3, 0x7fbfcb80);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x6d705fbf);
  c.expectreg(1, 0x3fa2c1f4);
  c.expectreg(2, 0x6bd2b657);
  c.expectreg(3, 0x7fbfcb80);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3e0d12a6);
  c.r(1, 0x39bc796b);
  c.r(2, 0x1488e72c);
  c.r(3, 0x4b00257c);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x4566aa05);
  c.expectreg(1, 0x39bc796b);
  c.expectreg(2, 0x1488e72c);
  c.expectreg(3, 0x4b00257c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6c960279);
  c.r(1, 0x4254b8df);
  c.r(2, 0x10f22dbd);
  c.r(3, 0x616547bb);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x6d3f24c6);
  c.expectreg(1, 0x4254b8df);
  c.expectreg(2, 0x10f22dbd);
  c.expectreg(3, 0x616547bb);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x2b522849);
  c.r(1, 0x4327697b);
  c.r(2, 0x3cd9de9a);
  c.r(3, 0x64c312ae);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x5c003c61);
  c.expectreg(1, 0x4327697b);
  c.expectreg(2, 0x3cd9de9a);
  c.expectreg(3, 0x64c312ae);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x31447587);
  c.r(1, 0x2947e1f);
  c.r(2, 0x14d16916);
  c.r(3, 0x23f1c912);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x2500e98f);
  c.expectreg(1, 0x2947e1f);
  c.expectreg(2, 0x14d16916);
  c.expectreg(3, 0x23f1c912);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1292047c);
  c.r(1, 0x127b6ccb);
  c.r(2, 0x26c22285);
  c.r(3, 0x5c790bda);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x5ef70a6c);
  c.expectreg(1, 0x127b6ccb);
  c.expectreg(2, 0x26c22285);
  c.expectreg(3, 0x5c790bda);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x26d0575b);
  c.r(1, 0x7d35c851);
  c.r(2, 0x5a3c6e7a);
  c.r(3, 0x248a1864);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x5a92e018);
  c.expectreg(1, 0x7d35c851);
  c.expectreg(2, 0x5a3c6e7a);
  c.expectreg(3, 0x248a1864);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x26bc8e2a);
  c.r(1, 0x9e88ec7);
  c.r(2, 0x6daea752);
  c.r(3, 0x30126bad);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x2ca3be87);
  c.expectreg(1, 0x9e88ec7);
  c.expectreg(2, 0x6daea752);
  c.expectreg(3, 0x30126bad);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x498b50bb);
  c.r(1, 0x59815daa);
  c.r(2, 0x2fd2372d);
  c.r(3, 0x7986361);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x1ae2ea3d);
  c.expectreg(1, 0x59815daa);
  c.expectreg(2, 0x2fd2372d);
  c.expectreg(3, 0x7986361);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x1d491279);
  c.r(1, 0x3bba1103);
  c.r(2, 0x775d6cf5);
  c.r(3, 0x4b1b395a);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x57fe0302);
  c.expectreg(1, 0x3bba1103);
  c.expectreg(2, 0x775d6cf5);
  c.expectreg(3, 0x4b1b395a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3b014b0e);
  c.r(1, 0x1559d9ba);
  c.r(2, 0x46a834c7);
  c.r(3, 0xd35f0e3);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x398e7a39);
  c.expectreg(1, 0x1559d9ba);
  c.expectreg(2, 0x46a834c7);
  c.expectreg(3, 0xd35f0e3);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7b910447);
  c.r(1, 0x611885c7);
  c.r(2, 0x1dbd185f);
  c.r(3, 0x5b644953);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x8cc8d7aa);
  c.expectreg(1, 0x611885c7);
  c.expectreg(2, 0x1dbd185f);
  c.expectreg(3, 0x5b644953);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x303ac1f6);
  c.r(1, 0x7ff841c0);
  c.r(2, 0x29e3e037);
  c.r(3, 0x3933dd14);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x2369e8a7);
  c.expectreg(1, 0x7ff841c0);
  c.expectreg(2, 0x29e3e037);
  c.expectreg(3, 0x3933dd14);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3ae0f151);
  c.r(1, 0x2edd8f38);
  c.r(2, 0x5dd715e0);
  c.r(3, 0x75371c74);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x4f530ddd);
  c.expectreg(1, 0x2edd8f38);
  c.expectreg(2, 0x5dd715e0);
  c.expectreg(3, 0x75371c74);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x170e5652);
  c.r(1, 0x5db62689);
  c.r(2, 0x3bbd8346);
  c.r(3, 0x7655378f);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0xea5e2a23);
  c.expectreg(1, 0x5db62688);
  c.expectreg(2, 0x3bbd8346);
  c.expectreg(3, 0x7655378f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3fb70986);
  c.r(1, 0x681b10ba);
  c.r(2, 0x19503466);
  c.r(3, 0x7e657446);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x651515a4);
  c.expectreg(1, 0x681b10ba);
  c.expectreg(2, 0x19503466);
  c.expectreg(3, 0x7e657446);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7d905669);
  c.r(1, 0x1f0ac769);
  c.r(2, 0xc4ca079);
  c.r(3, 0x1ad968e2);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x78956212);
  c.expectreg(1, 0x1f0ac769);
  c.expectreg(2, 0xc4ca079);
  c.expectreg(3, 0x1ad968e2);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5ac4d86c);
  c.r(1, 0x3aa0d6f);
  c.r(2, 0x65f4a23c);
  c.r(3, 0x15c6237a);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x60ec311c);
  c.expectreg(1, 0x3aa0d6f);
  c.expectreg(2, 0x65f4a23c);
  c.expectreg(3, 0x15c6237a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1903e729);
  c.r(1, 0x2c9cd703);
  c.r(2, 0x22fc145d);
  c.r(3, 0x1494eb71);
  c.x("smlaldx r0, r1, r2, r3");
  c.expectreg(0, 0x17d7b629);
  c.expectreg(1, 0x2c9cd703);
  c.expectreg(2, 0x22fc145d);
  c.expectreg(3, 0x1494eb71);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x78394bff);
  c.r(1, 0xe2c25e);
  c.r(2, 0x6ff10479);
  c.r(3, 0x20df215);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0x78e09d29);
  c.expectreg(1, 0xe2c25e);
  c.expectreg(2, 0x6ff10479);
  c.expectreg(3, 0x20df215);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x2492e1bf);
  c.r(1, 0x6d4fbec6);
  c.r(2, 0x4db9ca8f);
  c.r(3, 0x7eb3519c);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0x3a00f63e);
  c.expectreg(1, 0x6d4fbec6);
  c.expectreg(2, 0x4db9ca8f);
  c.expectreg(3, 0x7eb3519c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5ed8e986);
  c.r(1, 0x2b96dd89);
  c.r(2, 0x171f2c91);
  c.r(3, 0x289635a1);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0x6bd959e1);
  c.expectreg(1, 0x2b96dd89);
  c.expectreg(2, 0x171f2c91);
  c.expectreg(3, 0x289635a1);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xbc392e4);
  c.r(1, 0x3f23be8d);
  c.r(2, 0x6731d0e0);
  c.r(3, 0x236cd3d3);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0x222c9730);
  c.expectreg(1, 0x3f23be8d);
  c.expectreg(2, 0x6731d0e0);
  c.expectreg(3, 0x236cd3d3);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x35f2c233);
  c.r(1, 0x43c5950b);
  c.r(2, 0x14a9682);
  c.r(3, 0x42b7460d);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0x196af2b3);
  c.expectreg(1, 0x43c5950b);
  c.expectreg(2, 0x14a9682);
  c.expectreg(3, 0x42b7460d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7c835289);
  c.r(1, 0x857223c);
  c.r(2, 0x58a650de);
  c.r(3, 0x31a2c3df);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0x7ab4bcf7);
  c.expectreg(1, 0x857223c);
  c.expectreg(2, 0x58a650de);
  c.expectreg(3, 0x31a2c3df);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x13ba373a);
  c.r(1, 0x7fdd170d);
  c.r(2, 0x2573244);
  c.r(3, 0x4ed28ac6);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0xfd6e2d30);
  c.expectreg(1, 0x7fdd170c);
  c.expectreg(2, 0x2573244);
  c.expectreg(3, 0x4ed28ac6);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xc38eb4e);
  c.r(1, 0x34109db);
  c.r(2, 0x2a0d1ba8);
  c.r(3, 0x472374e);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0x12ed5e48);
  c.expectreg(1, 0x34109db);
  c.expectreg(2, 0x2a0d1ba8);
  c.expectreg(3, 0x472374e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x423cc39);
  c.r(1, 0x19fe2021);
  c.r(2, 0x6802963);
  c.r(3, 0x28b6adf8);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0xf7e96a21);
  c.expectreg(1, 0x19fe2020);
  c.expectreg(2, 0x6802963);
  c.expectreg(3, 0x28b6adf8);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x74ddee7);
  c.r(1, 0x5439f3f2);
  c.r(2, 0x2769ff95);
  c.r(3, 0x6626c86d);
  c.x("smlald r0, r1, r2, r3");
  c.expectreg(0, 0x171ec8ee);
  c.expectreg(1, 0x5439f3f2);
  c.expectreg(2, 0x2769ff95);
  c.expectreg(3, 0x6626c86d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;
  c.cf();
  c.r(0, 0x7d569999);
  c.r(1, 0x728b2af3);
  c.r(2, 0x134151af);
  c.r(3, 0x27a1f2cb);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x89fba1a8);
  c.expectreg(1, 0x728b2af3);
  c.expectreg(2, 0x134151af);
  c.expectreg(3, 0x27a1f2cb);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7244f8af);
  c.r(1, 0xad94774);
  c.r(2, 0x36408e3a);
  c.r(3, 0x74c82351);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x3e5e5dff);
  c.expectreg(1, 0xad94774);
  c.expectreg(2, 0x36408e3a);
  c.expectreg(3, 0x74c82351);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6322c1d5);
  c.r(1, 0x52daed51);
  c.r(2, 0x30121b89);
  c.r(3, 0x47151771);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x6ac80312);
  c.expectreg(1, 0x52daed51);
  c.expectreg(2, 0x30121b89);
  c.expectreg(3, 0x47151771);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7e0ec9f7);
  c.r(1, 0x4bc8916b);
  c.r(2, 0x425ae699);
  c.r(3, 0x5b27e3ae);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x75034e46);
  c.expectreg(1, 0x4bc8916b);
  c.expectreg(2, 0x425ae699);
  c.expectreg(3, 0x5b27e3ae);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7def2d1e);
  c.r(1, 0x83b70d5);
  c.r(2, 0x4b37b0e0);
  c.r(3, 0x61a22c6a);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x5fc1fade);
  c.expectreg(1, 0x83b70d5);
  c.expectreg(2, 0x4b37b0e0);
  c.expectreg(3, 0x61a22c6a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x28c4b9df);
  c.r(1, 0x1a154f01);
  c.r(2, 0x39a074fb);
  c.r(3, 0x2b3eb249);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x3c8737a9);
  c.expectreg(1, 0x1a154f01);
  c.expectreg(2, 0x39a074fb);
  c.expectreg(3, 0x2b3eb249);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5126db42);
  c.r(1, 0x207d87c3);
  c.r(2, 0x1757f31a);
  c.r(3, 0x3eefb7cd);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x4dfb1c88);
  c.expectreg(1, 0x207d87c3);
  c.expectreg(2, 0x1757f31a);
  c.expectreg(3, 0x3eefb7cd);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1cf2aacc);
  c.r(1, 0x6bcffbbd);
  c.r(2, 0x3ab1785d);
  c.r(3, 0x1a494465);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x294e6f51);
  c.expectreg(1, 0x6bcffbbd);
  c.expectreg(2, 0x3ab1785d);
  c.expectreg(3, 0x1a494465);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5e5b26b0);
  c.r(1, 0x4df2ca0d);
  c.r(2, 0x41eb3731);
  c.r(3, 0x50a01f5f);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x6fbcf550);
  c.expectreg(1, 0x4df2ca0d);
  c.expectreg(2, 0x41eb3731);
  c.expectreg(3, 0x50a01f5f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x58cc1181);
  c.r(1, 0x782bc56b);
  c.r(2, 0x456842b0);
  c.r(3, 0x3beed356);
  c.x("smlalbt r0, r1, r2, r3");
  c.expectreg(0, 0x6868a121);
  c.expectreg(1, 0x782bc56b);
  c.expectreg(2, 0x456842b0);
  c.expectreg(3, 0x3beed356);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x23ab77fe);
  c.r(1, 0x48f5f8c2);
  c.r(2, 0x4ff74a49);
  c.r(3, 0x79215fdc);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x3f7c65ba);
  c.expectreg(1, 0x48f5f8c2);
  c.expectreg(2, 0x4ff74a49);
  c.expectreg(3, 0x79215fdc);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x48058368);
  c.r(1, 0x3e54efae);
  c.r(2, 0x4c694022);
  c.r(3, 0x20a8a451);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x310d962a);
  c.expectreg(1, 0x3e54efae);
  c.expectreg(2, 0x4c694022);
  c.expectreg(3, 0x20a8a451);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4e75c71e);
  c.r(1, 0x4aebb5bd);
  c.r(2, 0x367d85f2);
  c.r(3, 0x24b133a6);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x35d5d80a);
  c.expectreg(1, 0x4aebb5bd);
  c.expectreg(2, 0x367d85f2);
  c.expectreg(3, 0x24b133a6);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5cb5e242);
  c.r(1, 0x4e5871eb);
  c.r(2, 0x364ccde9);
  c.r(3, 0x5373c5c0);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x681b9e02);
  c.expectreg(1, 0x4e5871eb);
  c.expectreg(2, 0x364ccde9);
  c.expectreg(3, 0x5373c5c0);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x22d75b84);
  c.r(1, 0x71051703);
  c.r(2, 0x6821dbed);
  c.r(3, 0x7ffe96c6);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x31ab52d2);
  c.expectreg(1, 0x71051703);
  c.expectreg(2, 0x6821dbed);
  c.expectreg(3, 0x7ffe96c6);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6cbd21eb);
  c.r(1, 0xcbaa9ef);
  c.r(2, 0x1c3db485);
  c.r(3, 0x3ca8156);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x9215cb99);
  c.expectreg(1, 0xcbaa9ef);
  c.expectreg(2, 0x1c3db485);
  c.expectreg(3, 0x3ca8156);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xe2c50a9);
  c.r(1, 0x20584aa6);
  c.r(2, 0xf744bc8);
  c.r(3, 0xd530419);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0xf62d731);
  c.expectreg(1, 0x20584aa6);
  c.expectreg(2, 0xf744bc8);
  c.expectreg(3, 0xd530419);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x2534d19d);
  c.r(1, 0x24c355ae);
  c.r(2, 0x315a3565);
  c.r(3, 0x48e0499b);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x348ef2c4);
  c.expectreg(1, 0x24c355ae);
  c.expectreg(2, 0x315a3565);
  c.expectreg(3, 0x48e0499b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6db94e71);
  c.r(1, 0x1517fae);
  c.r(2, 0x4201a978);
  c.r(3, 0x35bed1d9);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x7d52ed29);
  c.expectreg(1, 0x1517fae);
  c.expectreg(2, 0x4201a978);
  c.expectreg(3, 0x35bed1d9);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3fa66f5c);
  c.r(1, 0xe6ae99a);
  c.r(2, 0x5667762b);
  c.r(3, 0xe1c367b);
  c.x("smlalbb r0, r1, r2, r3");
  c.expectreg(0, 0x58cc4805);
  c.expectreg(1, 0xe6ae99a);
  c.expectreg(2, 0x5667762b);
  c.expectreg(3, 0xe1c367b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x3b79dec1);
  c.r(1, 0x77b2fb27);
  c.r(2, 0x5b60b1de);
  c.r(3, 0x53e4ba13);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0xa89a5e3b);
  c.expectreg(1, 0x95a4f95b);
  c.expectreg(2, 0x5b60b1de);
  c.expectreg(3, 0x53e4ba13);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x22d43a2e);
  c.r(1, 0x519d95e);
  c.r(2, 0x96971e5);
  c.r(3, 0x3903cf57);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0xeb711a01);
  c.expectreg(1, 0x7327795);
  c.expectreg(2, 0x96971e5);
  c.expectreg(3, 0x3903cf57);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7cfb3902);
  c.r(1, 0x7246c4ae);
  c.r(2, 0x164cc5c2);
  c.r(3, 0x7f1db3ea);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0x3268a256);
  c.expectreg(1, 0x7d597128);
  c.expectreg(2, 0x164cc5c2);
  c.expectreg(3, 0x7f1db3ea);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x21aed7a);
  c.r(1, 0x23457e0);
  c.r(2, 0x4a93ab44);
  c.r(3, 0x2ae47af9);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0x9beaea9e);
  c.expectreg(1, 0xeb32150);
  c.expectreg(2, 0x4a93ab44);
  c.expectreg(3, 0x2ae47af9);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x35953461);
  c.r(1, 0x7ff7e3d2);
  c.r(2, 0x4fbd80b);
  c.r(3, 0x1a45a442);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0x2de0f337);
  c.expectreg(1, 0x807ad2d7);
  c.expectreg(2, 0x4fbd80b);
  c.expectreg(3, 0x1a45a442);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x100e3fc5);
  c.r(1, 0x673d4c5);
  c.r(2, 0x17c67611);
  c.r(3, 0x19d9b46f);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0xa7886524);
  c.expectreg(1, 0x8da6e48);
  c.expectreg(2, 0x17c67611);
  c.expectreg(3, 0x19d9b46f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3a07e48b);
  c.r(1, 0x2f88a50b);
  c.r(2, 0x44e8007b);
  c.r(3, 0x116dd914);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0xa3ef3127);
  c.expectreg(1, 0x34399e49);
  c.expectreg(2, 0x44e8007b);
  c.expectreg(3, 0x116dd914);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3b05b61d);
  c.r(1, 0x7d95aeeb);
  c.r(2, 0x18a89b70);
  c.r(3, 0x767f94de);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0xd3a9413d);
  c.expectreg(1, 0x88ffb08c);
  c.expectreg(2, 0x18a89b70);
  c.expectreg(3, 0x767f94de);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7548aa12);
  c.r(1, 0x74094d4e);
  c.r(2, 0x4a644ef1);
  c.r(3, 0x181ce440);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0x9f070a52);
  c.expectreg(1, 0x7b0b1a01);
  c.expectreg(2, 0x4a644ef1);
  c.expectreg(3, 0x181ce440);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x792326ac);
  c.r(1, 0x53cdc0d6);
  c.r(2, 0x5120b398);
  c.r(3, 0x761e5fae);
  c.x("smlal r0, r1, r2, r3");
  c.expectreg(0, 0xdbd29ffc);
  c.expectreg(1, 0x793c73c5);
  c.expectreg(2, 0x5120b398);
  c.expectreg(3, 0x761e5fae);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0x31e63ca4);
  c.r(1, 0x74c972d5);
  c.r(2, 0x13154299);
  c.r(3, 0x3f058aee);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x65f66388);
  c.expectreg(1, 0x74c972d5);
  c.expectreg(2, 0x13154299);
  c.expectreg(3, 0x3f058aee);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x76ff2fd7);
  c.r(1, 0x50a6d95d);
  c.r(2, 0x2ab71f8a);
  c.r(3, 0x2e2cfb94);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x31aa328b);
  c.expectreg(1, 0x50a6d95d);
  c.expectreg(2, 0x2ab71f8a);
  c.expectreg(3, 0x2e2cfb94);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1dc385c0);
  c.r(1, 0x4825d55e);
  c.r(2, 0xa417a0f);
  c.r(3, 0x65d14e7a);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x86820383);
  c.expectreg(1, 0x4825d55e);
  c.expectreg(2, 0xa417a0f);
  c.expectreg(3, 0x65d14e7a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x1eb1f7b4);
  c.r(1, 0x210fde62);
  c.r(2, 0xe7cfbc6);
  c.r(3, 0x313816d8);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x2ec570ea);
  c.expectreg(1, 0x210fde62);
  c.expectreg(2, 0xe7cfbc6);
  c.expectreg(3, 0x313816d8);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x7d7e56d0);
  c.r(1, 0x6d1a2584);
  c.r(2, 0x2f7488cc);
  c.r(3, 0x4194f73d);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x15bbf3c5);
  c.expectreg(1, 0x6d1a2584);
  c.expectreg(2, 0x2f7488cc);
  c.expectreg(3, 0x4194f73d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x48b33b78);
  c.r(1, 0x7187c151);
  c.r(2, 0x34adcefc);
  c.r(3, 0x294c0747);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x6a981e8);
  c.expectreg(1, 0x7187c151);
  c.expectreg(2, 0x34adcefc);
  c.expectreg(3, 0x294c0747);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x3ece8925);
  c.r(1, 0x16da8726);
  c.r(2, 0x29897174);
  c.r(3, 0x2911a5ce);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x1f96a3ec);
  c.expectreg(1, 0x16da8726);
  c.expectreg(2, 0x29897174);
  c.expectreg(3, 0x2911a5ce);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1171b8e2);
  c.r(1, 0x1b077318);
  c.r(2, 0x3134cc0b);
  c.r(3, 0x4357f586);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x53faabb3);
  c.expectreg(1, 0x1b077318);
  c.expectreg(2, 0x3134cc0b);
  c.expectreg(3, 0x4357f586);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xfd0e5ed);
  c.r(1, 0x444a0ea4);
  c.r(2, 0x25d8075);
  c.r(3, 0x6d015c5);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0xe4ece52b);
  c.expectreg(1, 0x444a0ea4);
  c.expectreg(2, 0x25d8075);
  c.expectreg(3, 0x6d015c5);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x14f0e802);
  c.r(1, 0x2d149fff);
  c.r(2, 0x34fd1159);
  c.r(3, 0x32b46dc2);
  c.x("smladx r0, r1, r2, r3");
  c.expectreg(0, 0x21e358b9);
  c.expectreg(1, 0x2d149fff);
  c.expectreg(2, 0x34fd1159);
  c.expectreg(3, 0x32b46dc2);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;

  c.cf();
  c.r(0, 0xdc05164);
  c.r(1, 0x6bb3234d);
  c.r(2, 0x1aed91c2);
  c.r(3, 0x1498a2a2);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x10b8e2b3);
  c.expectreg(1, 0x6bb3234d);
  c.expectreg(2, 0x1aed91c2);
  c.expectreg(3, 0x1498a2a2);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x6500c3bc);
  c.r(1, 0x2e8f1d1e);
  c.r(2, 0x75147f83);
  c.r(3, 0x277349ce);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x4b3f1054);
  c.expectreg(1, 0x2e8f1d1e);
  c.expectreg(2, 0x75147f83);
  c.expectreg(3, 0x277349ce);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x52d64849);
  c.r(1, 0x5e5a0309);
  c.r(2, 0xb72787e);
  c.r(3, 0x41d192d);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x9c2b1af);
  c.expectreg(1, 0x5e5a0309);
  c.expectreg(2, 0xb72787e);
  c.expectreg(3, 0x41d192d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x21aec78e);
  c.r(1, 0xdd125d4);
  c.r(2, 0x4427fd8);
  c.r(3, 0x77345233);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x8a533cf5);
  c.expectreg(1, 0xdd125d4);
  c.expectreg(2, 0x4427fd8);
  c.expectreg(3, 0x77345233);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  c.cf();
  //===========================
  c.cf();
  c.r(0, 0x1a574ea3);
  c.r(1, 0x2eb39cff);
  c.r(2, 0x400f0b6e);
  c.r(3, 0x5f0133a4);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x66451ab3);
  c.expectreg(1, 0x2eb39cff);
  c.expectreg(2, 0x400f0b6e);
  c.expectreg(3, 0x5f0133a4);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x2ec9963a);
  c.r(1, 0x6ce2f6b0);
  c.r(2, 0x611dbad);
  c.r(3, 0x30c24d7d);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x34a9196f);
  c.expectreg(1, 0x6ce2f6b0);
  c.expectreg(2, 0x611dbad);
  c.expectreg(3, 0x30c24d7d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x60cac8e4);
  c.r(1, 0x1aaae823);
  c.r(2, 0x4def75f1);
  c.r(3, 0x290a600f);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x2629eeb8);
  c.expectreg(1, 0x1aaae823);
  c.expectreg(2, 0x4def75f1);
  c.expectreg(3, 0x290a600f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x316f6b55);
  c.r(1, 0x5794c0e6);
  c.r(2, 0x3769c8ee);
  c.r(3, 0x3f2fbcb9);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x5fb77a41);
  c.expectreg(1, 0x5794c0e6);
  c.expectreg(2, 0x3769c8ee);
  c.expectreg(3, 0x3f2fbcb9);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x4347e433);
  c.r(1, 0x52575ab0);
  c.r(2, 0x53c85f5b);
  c.r(3, 0x2848a7ef);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x6502bd77);
  c.expectreg(1, 0x52575ab0);
  c.expectreg(2, 0x53c85f5b);
  c.expectreg(3, 0x2848a7ef);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xe677cf);
  c.r(1, 0x48dcdede);
  c.r(2, 0x4fbbf1bd);
  c.r(3, 0x53bcc018);
  c.x("smlad r0, r1, r2, r3");
  c.expectreg(0, 0x6c4664b2);
  c.expectreg(1, 0x48dcdede);
  c.expectreg(2, 0x4fbbf1bd);
  c.expectreg(3, 0x53bcc018);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;
  c.cf();
  c.r(0, 0x2efe45f5);
  c.r(1, 0x14bb9b5a);
  c.r(2, 0x654d3e0);
  c.r(3, 0x500eb07e);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x4d91c606);
  c.expectreg(1, 0x14bb9b5a);
  c.expectreg(2, 0x654d3e0);
  c.expectreg(3, 0x500eb07e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x61421466);
  c.r(1, 0x2a50fe7a);
  c.r(2, 0x68512dab);
  c.r(3, 0x1776e253);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x16d7f6ed);
  c.expectreg(1, 0x2a50fe7a);
  c.expectreg(2, 0x68512dab);
  c.expectreg(3, 0x1776e253);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0xc99266d);
  c.r(1, 0x1c35ee00);
  c.r(2, 0x265d9861);
  c.r(3, 0x416a0dcb);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x3eb783cb);
  c.expectreg(1, 0x1c35ee00);
  c.expectreg(2, 0x265d9861);
  c.expectreg(3, 0x416a0dcb);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x1767aa4b);
  c.r(1, 0x821732b);
  c.r(2, 0x15d685ec);
  c.r(3, 0x356c5b44);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x3f3f2836);
  c.expectreg(1, 0x821732b);
  c.expectreg(2, 0x15d685ec);
  c.expectreg(3, 0x356c5b44);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x403e9087);
  c.r(1, 0x75942035);
  c.r(2, 0x5b2adb8a);
  c.r(3, 0x5c96f9af);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x680f1961);
  c.expectreg(1, 0x75942035);
  c.expectreg(2, 0x5b2adb8a);
  c.expectreg(3, 0x5c96f9af);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x228a826);
  c.r(1, 0x7aa8b990);
  c.r(2, 0x79e10322);
  c.r(3, 0x731e4cb8);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x51957448);
  c.expectreg(1, 0x7aa8b990);
  c.expectreg(2, 0x79e10322);
  c.expectreg(3, 0x731e4cb8);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x40fe6fbe);
  c.r(1, 0x40c51a28);
  c.r(2, 0x48f12112);
  c.r(3, 0x1a118a15);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x218569bd);
  c.expectreg(1, 0x40c51a28);
  c.expectreg(2, 0x48f12112);
  c.expectreg(3, 0x1a118a15);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x640f5bbc);
  c.r(1, 0x3eae3315);
  c.r(2, 0xf656ff8);
  c.r(3, 0x130da1b1);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x162003fa);
  c.expectreg(1, 0x3eae3315);
  c.expectreg(2, 0xf656ff8);
  c.expectreg(3, 0x130da1b1);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x5369ce70);
  c.r(1, 0x15ba43d8);
  c.r(2, 0x631c522f);
  c.r(3, 0x34abe2d6);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x4eefd676);
  c.expectreg(1, 0x15ba43d8);
  c.expectreg(2, 0x631c522f);
  c.expectreg(3, 0x34abe2d6);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  c.cf();
  c.r(0, 0x400b4252);
  c.r(1, 0x4b6d7fda);
  c.r(2, 0x4c22c529);
  c.r(3, 0x4ca468c0);
  c.x("smlabt r0, r1, r2, r3");
  c.expectreg(0, 0x72aa1bb4);
  c.expectreg(1, 0x4b6d7fda);
  c.expectreg(2, 0x4c22c529);
  c.expectreg(3, 0x4ca468c0);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.cf();
  return;
  c.r(0, 0x40d143a0);
  c.r(1, 0x25be7e2e);
  c.r(2, 0x6db7bf1c);
  c.r(3, 0x61276d16);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x412b8c1e);
  c.expectreg(1, 0x25be7e2e);
  c.expectreg(2, 0x6db7bf1c);
  c.expectreg(3, 0x61276d16);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x7dd44198);
  c.r(1, 0x40b55f5f);
  c.r(2, 0x21eb2092);
  c.r(3, 0x6f537a79);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x7b75bea7);
  c.expectreg(1, 0x40b55f5f);
  c.expectreg(2, 0x21eb2092);
  c.expectreg(3, 0x6f537a79);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0xabc554d);
  c.r(1, 0x435c5a7);
  c.r(2, 0x1ef0fe82);
  c.r(3, 0x72544607);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x72ab56d5);
  c.expectreg(1, 0x435c5a7);
  c.expectreg(2, 0x1ef0fe82);
  c.expectreg(3, 0x72544607);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x6c2616ae);
  c.r(1, 0x369793b1);
  c.r(2, 0x44955022);
  c.r(3, 0x5f9520ba);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x3dae0e3c);
  c.expectreg(1, 0x369793b1);
  c.expectreg(2, 0x44955022);
  c.expectreg(3, 0x5f9520ba);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x61c9661d);
  c.r(1, 0x23411707);
  c.r(2, 0x424a60aa);
  c.r(3, 0x4fd1048c);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x5882ef32);
  c.expectreg(1, 0x23411707);
  c.expectreg(2, 0x424a60aa);
  c.expectreg(3, 0x4fd1048c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x5839ed95);
  c.r(1, 0x58193607);
  c.r(2, 0xe94d6dd);
  c.r(3, 0x2e5654ae);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x25a7d2b9);
  c.expectreg(1, 0x58193607);
  c.expectreg(2, 0xe94d6dd);
  c.expectreg(3, 0x2e5654ae);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x3d2210ce);
  c.r(1, 0x193a8723);
  c.r(2, 0x25ecc64e);
  c.r(3, 0x3c83ae36);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x57c0ece0);
  c.expectreg(1, 0x193a8723);
  c.expectreg(2, 0x25ecc64e);
  c.expectreg(3, 0x3c83ae36);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x3f8f10b8);
  c.r(1, 0xdc2788f);
  c.r(2, 0x1e836803);
  c.r(3, 0x605458);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x315bd605);
  c.expectreg(1, 0xdc2788f);
  c.expectreg(2, 0x1e836803);
  c.expectreg(3, 0x605458);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x3380f6bd);
  c.r(1, 0xc3b2720);
  c.r(2, 0x6187c16e);
  c.r(3, 0x31553855);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x27c52815);
  c.expectreg(1, 0xc3b2720);
  c.expectreg(2, 0x6187c16e);
  c.expectreg(3, 0x31553855);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x4cf0867f);
  c.r(1, 0x372e200);
  c.r(2, 0x20a8b2ce);
  c.r(3, 0x57acdbcc);
  c.x("smlabb r0, r1, r2, r3");
  c.expectreg(0, 0x60b8b7cc);
  c.expectreg(1, 0x372e200);
  c.expectreg(2, 0x20a8b2ce);
  c.expectreg(3, 0x57acdbcc);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  return;

  c.r(0, 0x0);
  c.r(1, 0x48732ce5);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0x3fff2ce5);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0x438a6430);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0x3fff3fff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0x29002507);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0x29002507);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x0);
  c.r(1, 0x55e5653e);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0x3fff3fff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0x4bc730c8);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0x3fff30c8);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0xf4d377c);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0xf4d377c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x0);
  c.r(1, 0x34c43864);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0x34c43864);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x0);
  c.r(1, 0x4a08f44);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0x4a0c000);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0x79f44c61);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0x3fff3fff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0xa1d8ad0);
  c.x("ssat16 r0, #15, r1");
  c.expectreg(0, 0xa1dc000);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
}

static void testssat() {
  Cpu c;
  c.r(0, 0x0);
  c.r(1, 0x511aeb3c);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x1fffffff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0x7381a705);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x1fffffff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0x62ee0970);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x1fffffff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0x1e427785);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x1e427785);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x0);
  c.r(1, 0x16accf49);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x16accf49);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x0);
  c.r(1, 0x7fd37174);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x1fffffff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0x458b247a);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x1fffffff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
  c.r(0, 0x0);
  c.r(1, 0xed85956);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0xed85956);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x0);
  c.r(1, 0x1c4aa91f);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x1c4aa91f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x0);
  c.r(1, 0x6f250c5d);
  c.x("ssat r0, #30, r1");
  c.expectreg(0, 0x1fffffff);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
  //===========================
}

static void testsmusd() {
  Cpu c;
  c.r(0, 0x15c71891);
  c.r(1, 0x27753ab1);
  c.r(2, 0x36011286);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0x986af73);
  c.expectreg(1, 0x27753ab1);
  c.expectreg(2, 0x36011286);
  c.r(0, 0x1a093a3d);
  c.r(1, 0xbece83d);
  c.r(2, 0x52a511f8);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0xf77e00b1);
  c.expectreg(1, 0xbece83d);
  c.expectreg(2, 0x52a511f8);
  c.r(0, 0x5b8d1a02);
  c.r(1, 0x143205b);
  c.r(2, 0x58bc45cf);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0xadef6a7);
  c.expectreg(1, 0x143205b);
  c.expectreg(2, 0x58bc45cf);
  c.r(0, 0x636ff942);
  c.r(1, 0x57d1394d);
  c.r(2, 0x463c3cdb);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0xfad86041);
  c.expectreg(1, 0x57d1394d);
  c.expectreg(2, 0x463c3cdb);
  c.r(0, 0xf5737c5);
  c.r(1, 0x1a34d49f);
  c.r(2, 0x61152627);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0xeba4fa1f);
  c.expectreg(1, 0x1a34d49f);
  c.expectreg(2, 0x61152627);
  c.r(0, 0x2319514a);
  c.r(1, 0x5dfdbabe);
  c.r(2, 0x7634c958);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0xf4168ea0);
  c.expectreg(1, 0x5dfdbabe);
  c.expectreg(2, 0x7634c958);
  c.r(0, 0x5be860d7);
  c.r(1, 0x4988318);
  c.r(2, 0x4340d102);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0xe007ecd0);
  c.expectreg(1, 0x4988318);
  c.expectreg(2, 0x4340d102);
  c.r(0, 0x66682e);
  c.r(1, 0x27b67d10);
  c.r(2, 0x515d82fd);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0x3b23d3f2);
  c.expectreg(1, 0x27b67d10);
  c.expectreg(2, 0x515d82fd);
  c.r(0, 0x4f2bb7c1);
  c.r(1, 0x75e9583);
  c.r(2, 0xce360a5);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0xf7dbb793);
  c.expectreg(1, 0x75e9583);
  c.expectreg(2, 0xce360a5);
  c.r(0, 0x134b7dc0);
  c.r(1, 0x5f88729d);
  c.r(2, 0x6ecbb992);
  c.x("smusdx r0, r1, r2");
  c.expectreg(0, 0x4be294ef);
  c.expectreg(1, 0x5f88729d);
  c.expectreg(2, 0x6ecbb992);

  c.r(0, 0x4deaeec0);
  c.r(1, 0x48491a89);
  c.r(2, 0x4b64847e);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0xdde913ea);
  c.expectreg(1, 0x48491a89);
  c.expectreg(2, 0x4b64847e);
  c.r(0, 0x3767448c);
  c.r(1, 0x22694b2f);
  c.r(2, 0x7a289273);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0xcf6829b5);
  c.expectreg(1, 0x22694b2f);
  c.expectreg(2, 0x7a289273);
  c.r(0, 0x5edc0874);
  c.r(1, 0x2df8e52a);
  c.r(2, 0x1cd8aac9);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0x3c0e8ba);
  c.expectreg(1, 0x2df8e52a);
  c.expectreg(2, 0x1cd8aac9);
  c.r(0, 0x4e192cb3);
  c.r(1, 0x127f7233);
  c.r(2, 0x39db3623);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0x13f84554);
  c.expectreg(1, 0x127f7233);
  c.expectreg(2, 0x39db3623);
  c.r(0, 0x5b9241a2);
  c.r(1, 0x1f739c46);
  c.r(2, 0x24528d7a);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0x2826c886);
  c.expectreg(1, 0x1f739c46);
  c.expectreg(2, 0x24528d7a);
  c.r(0, 0x1bb66d54);
  c.r(1, 0x6885b173);
  c.r(2, 0x7d02e7bc);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0xd468536a);
  c.expectreg(1, 0x6885b173);
  c.expectreg(2, 0x7d02e7bc);
  c.r(0, 0x7a132c4c);
  c.r(1, 0x45006d70);
  c.r(2, 0x1d722348);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0x7255d80);
  c.expectreg(1, 0x45006d70);
  c.expectreg(2, 0x1d722348);
  c.r(0, 0x7a6f9f79);
  c.r(1, 0x74cef6af);
  c.r(2, 0x76def910);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0xca04634c);
  c.expectreg(1, 0x74cef6af);
  c.expectreg(2, 0x76def910);
  c.r(0, 0x3d181138);
  c.r(1, 0x42437d8e);
  c.r(2, 0x6737d819);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0xd1b6e179);
  c.expectreg(1, 0x42437d8e);
  c.expectreg(2, 0x6737d819);
  c.r(0, 0x64acc8bd);
  c.r(1, 0x61606a8c);
  c.r(2, 0x3f3ea086);
  c.x("smusd r0, r1, r2");
  c.expectreg(0, 0xc0351008);
  c.expectreg(1, 0x61606a8c);
  c.expectreg(2, 0x3f3ea086);
}

static void testsmulwb() {
  Cpu c;
  c.r(0, 0x4b26357e);
  c.r(1, 0xa8f2a72);
  c.r(2, 0x394537a1);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0x24b6628);
  c.expectreg(1, 0xa8f2a72);
  c.expectreg(2, 0x394537a1);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x317c1552);
  c.r(1, 0x4fce672b);
  c.r(2, 0xc0cccee);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0xf01444ef);
  c.expectreg(1, 0x4fce672b);
  c.expectreg(2, 0xc0cccee);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x9edbf42);
  c.r(1, 0x2be5ef13);
  c.r(2, 0x6b7f27c6);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0x6d1fb42);
  c.expectreg(1, 0x2be5ef13);
  c.expectreg(2, 0x6b7f27c6);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x66023a7);
  c.r(1, 0x62bd6729);
  c.r(2, 0x70f28c3a);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0xd3588c2a);
  c.expectreg(1, 0x62bd6729);
  c.expectreg(2, 0x70f28c3a);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x66512210);
  c.r(1, 0x4bbddca0);
  c.r(2, 0x5b01ccd);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0x8856b2b);
  c.expectreg(1, 0x4bbddca0);
  c.expectreg(2, 0x5b01ccd);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x4b0278ab);
  c.r(1, 0x175316a0);
  c.r(2, 0x1dbd81ee);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0xf4837705);
  c.expectreg(1, 0x175316a0);
  c.expectreg(2, 0x1dbd81ee);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x7470694c);
  c.r(1, 0x667feecd);
  c.r(2, 0x6cecaf53);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0xdfb2c0eb);
  c.expectreg(1, 0x667feecd);
  c.expectreg(2, 0x6cecaf53);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x311ae990);
  c.r(1, 0x295b2225);
  c.r(2, 0x3ab5a18d);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0xf0bdf586);
  c.expectreg(1, 0x295b2225);
  c.expectreg(2, 0x3ab5a18d);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x33ea4c97);
  c.r(1, 0x73fad92e);
  c.r(2, 0x4cbd100b);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0x744a95a);
  c.expectreg(1, 0x73fad92e);
  c.expectreg(2, 0x4cbd100b);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x43c94059);
  c.r(1, 0x58c9dcf9);
  c.r(2, 0x7e82c437);
  c.x("smulwb r0, r1, r2");
  c.expectreg(0, 0xeb43c394);
  c.expectreg(1, 0x58c9dcf9);
  c.expectreg(2, 0x7e82c437);
  c.expectN(0);
  c.expectZ(0);
}

static void testsmull() {
  Cpu c;
  c.r(0, 0x6957f455);
  c.r(1, 0x1a1becc3);
  c.r(2, 0x6608259c);
  c.r(3, 0x572ecd51);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0x94b9d25c);
  c.expectreg(1, 0x22bf6c13);
  c.expectreg(2, 0x6608259c);
  c.expectreg(3, 0x572ecd51);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x2cf346b0);
  c.r(1, 0x57ee6bf4);
  c.r(2, 0x64ca785d);
  c.r(3, 0x310341ec);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0x894d92bc);
  c.expectreg(1, 0x134c095d);
  c.expectreg(2, 0x64ca785d);
  c.expectreg(3, 0x310341ec);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x17e6699a);
  c.r(1, 0x70b1eb9e);
  c.r(2, 0x1d741251);
  c.r(3, 0x5b2c1d72);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0x34af5512);
  c.expectreg(1, 0xa7d55d9);
  c.expectreg(2, 0x1d741251);
  c.expectreg(3, 0x5b2c1d72);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x3ce48653);
  c.r(1, 0x7a87fc78);
  c.r(2, 0x37fa3fe8);
  c.r(3, 0x34ba5e7c);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0x8f3e2460);
  c.expectreg(1, 0xb879576);
  c.expectreg(2, 0x37fa3fe8);
  c.expectreg(3, 0x34ba5e7c);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x49454587);
  c.r(1, 0x6b40cae9);
  c.r(2, 0x4c2fa976);
  c.r(3, 0xa08f8c4);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0x68580e58);
  c.expectreg(1, 0x2fc8824);
  c.expectreg(2, 0x4c2fa976);
  c.expectreg(3, 0xa08f8c4);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x781da238);
  c.r(1, 0x7258b83b);
  c.r(2, 0x4752b942);
  c.r(3, 0x44adcff9);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0xfcdc8f32);
  c.expectreg(1, 0x1322660d);
  c.expectreg(2, 0x4752b942);
  c.expectreg(3, 0x44adcff9);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x3003837e);
  c.r(1, 0xe6fae74);
  c.r(2, 0x40f16e84);
  c.r(3, 0x35bcbfe2);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0xf3880c88);
  c.expectreg(1, 0xda1dddb);
  c.expectreg(2, 0x40f16e84);
  c.expectreg(3, 0x35bcbfe2);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x1ffb34f1);
  c.r(1, 0x2db2548a);
  c.r(2, 0xe62ba3f);
  c.r(3, 0x9532946);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0x5840043a);
  c.expectreg(1, 0x8624e0);
  c.expectreg(2, 0xe62ba3f);
  c.expectreg(3, 0x9532946);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x47ce414d);
  c.r(1, 0x746adfdb);
  c.r(2, 0x6081f697);
  c.r(3, 0x74c187fd);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0x3d51543b);
  c.expectreg(1, 0x2c03d8fb);
  c.expectreg(2, 0x6081f697);
  c.expectreg(3, 0x74c187fd);
  c.expectN(0);
  c.expectZ(0);
  c.r(0, 0x4c594bd0);
  c.r(1, 0x454c6ef4);
  c.r(2, 0x25c4c9ea);
  c.r(3, 0x643fb56a);
  c.x("smull r0, r1, r2, r3");
  c.expectreg(0, 0xded40ce4);
  c.expectreg(1, 0xeca4510);
  c.expectreg(2, 0x25c4c9ea);
  c.expectreg(3, 0x643fb56a);
  c.expectN(0);
  c.expectZ(0);
}
static void testsmulbb() {
  Cpu c;
  c.r(0, 0x56726b25);
  c.r(1, 0x3a148b68);
  c.r(2, 0x2ac983d3);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0x388e1eb8);
  c.expectreg(1, 0x3a148b68);
  c.expectreg(2, 0x2ac983d3);
  c.expectQ(0);
  c.r(0, 0x5cee09c9);
  c.r(1, 0x52ee0193);
  c.r(2, 0x710261e1);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0x9a1533);
  c.expectreg(1, 0x52ee0193);
  c.expectreg(2, 0x710261e1);
  c.expectQ(0);
  c.r(0, 0x6017f558);
  c.r(1, 0x3db161e3);
  c.r(2, 0x2c2c598f);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0x223e98cd);
  c.expectreg(1, 0x3db161e3);
  c.expectreg(2, 0x2c2c598f);
  c.expectQ(0);
  c.r(0, 0x405b2fad);
  c.r(1, 0x330cdba9);
  c.r(2, 0x17c3ee27);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0x28894bf);
  c.expectreg(1, 0x330cdba9);
  c.expectreg(2, 0x17c3ee27);
  c.expectQ(0);
  c.r(0, 0x7a2fcfe0);
  c.r(1, 0x75a26247);
  c.r(2, 0x27ba1ef0);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0xbe07490);
  c.expectreg(1, 0x75a26247);
  c.expectreg(2, 0x27ba1ef0);
  c.expectQ(0);
  c.r(0, 0x6e4fd562);
  c.r(1, 0x551b69eb);
  c.r(2, 0x6021daf2);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0xf0ab3e26);
  c.expectreg(1, 0x551b69eb);
  c.expectreg(2, 0x6021daf2);
  c.expectQ(0);
  c.r(0, 0x2a549a8);
  c.r(1, 0x4f863def);
  c.r(2, 0x7bd115ee);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0x54e2f32);
  c.expectreg(1, 0x4f863def);
  c.expectreg(2, 0x7bd115ee);
  c.expectQ(0);
  c.r(0, 0x43b93b9f);
  c.r(1, 0x148c6b63);
  c.r(2, 0x617ab769);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0xe18cd09b);
  c.expectreg(1, 0x148c6b63);
  c.expectreg(2, 0x617ab769);
  c.expectQ(0);
  c.r(0, 0x4ea0f6cc);
  c.r(1, 0xc443b3c);
  c.r(2, 0x18ca71f6);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0x1a5e67a8);
  c.expectreg(1, 0xc443b3c);
  c.expectreg(2, 0x18ca71f6);
  c.expectQ(0);
  c.r(0, 0x5f323ccf);
  c.r(1, 0x9ccd3d7);
  c.r(2, 0x1c019f8e);
  c.x("smulbb r0, r1, r2");
  c.expectreg(0, 0x10a30a42);
  c.expectreg(1, 0x9ccd3d7);
  c.expectreg(2, 0x1c019f8e);
  c.expectQ(0);
  c.r(0, 0x33bc715);
  c.r(1, 0x4ed1e8d1);
  c.r(2, 0x49fb0395);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0xf94cddeb);
  c.expectreg(1, 0x4ed1e8d1);
  c.expectreg(2, 0x49fb0395);
  c.expectQ(0);
  c.r(0, 0x20aca71d);
  c.r(1, 0x7d98ab3b);
  c.r(2, 0x7cabdef9);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0xd6b7f469);
  c.expectreg(1, 0x7d98ab3b);
  c.expectreg(2, 0x7cabdef9);
  c.expectQ(0);
  c.r(0, 0x2569779d);
  c.r(1, 0x593a8e31);
  c.r(2, 0x3fdc7010);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0xe39c411c);
  c.expectreg(1, 0x593a8e31);
  c.expectreg(2, 0x3fdc7010);
  c.expectQ(0);
  c.r(0, 0x7083bde0);
  c.r(1, 0x334f1f3c);
  c.r(2, 0x2be8b205);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0x55b6260);
  c.expectreg(1, 0x334f1f3c);
  c.expectreg(2, 0x2be8b205);
  c.expectQ(0);
  c.r(0, 0x28495dbf);
  c.r(1, 0x764cfca7);
  c.r(2, 0x78533f5e);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0xfe6d3225);
  c.expectreg(1, 0x764cfca7);
  c.expectreg(2, 0x78533f5e);
  c.expectQ(0);
  c.r(0, 0x515f4e62);
  c.r(1, 0x323a577a);
  c.r(2, 0x8659240);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0x2de5322);
  c.expectreg(1, 0x323a577a);
  c.expectreg(2, 0x8659240);
  c.expectQ(0);
  c.r(0, 0x2ea76b8a);
  c.r(1, 0x2e874c8c);
  c.r(2, 0x1c097571);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0x86200ec);
  c.expectreg(1, 0x2e874c8c);
  c.expectreg(2, 0x1c097571);
  c.expectQ(0);
  c.r(0, 0x7ddf77b9);
  c.r(1, 0x6fd02e3);
  c.r(2, 0x29ecfeda);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0x790444);
  c.expectreg(1, 0x6fd02e3);
  c.expectreg(2, 0x29ecfeda);
  c.expectQ(0);
  c.r(0, 0x55ceebb4);
  c.r(1, 0x73e8026f);
  c.r(2, 0x50f5c286);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0xc5043b);
  c.expectreg(1, 0x73e8026f);
  c.expectreg(2, 0x50f5c286);
  c.expectQ(0);
  c.r(0, 0x7180adab);
  c.r(1, 0x4da1a17f);
  c.r(2, 0x34d1bbc2);
  c.x("smulbt r0, r1, r2");
  c.expectreg(0, 0xec80a4af);
  c.expectreg(1, 0x4da1a17f);
  c.expectreg(2, 0x34d1bbc2);
  c.expectQ(0);
}

static void testsmuad() {
  Cpu c;
  c.r(0, 0x46f0edc1);
  c.r(1, 0x52df16aa);
  c.r(2, 0x32674b60);
  c.x("smuadx r0, r1, r2");
  c.expectreg(0, 0x1cdcbb06);
  c.expectreg(1, 0x52df16aa);
  c.expectreg(2, 0x32674b60);
  c.expectQ(0);
  c.r(0, 0x2499e0cf);
  c.r(1, 0x7bed7ba9);
  c.r(2, 0x1d2d893b);
  c.x("smuadx r0, r1, r2");
  c.expectreg(0, 0xd4994654);
  c.expectreg(1, 0x7bed7ba9);
  c.expectreg(2, 0x1d2d893b);
  c.expectQ(0);
  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.x("smuadx r0, r1, r2");
  c.expectreg(0, 0xc969846);
  c.expectreg(1, 0x573f7e1f);
  c.expectreg(2, 0x21dbf3ff);
  c.expectQ(0);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.x("smuadx r0, r1, r2");
  c.expectreg(0, 0x1fb55e34);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.expectQ(0);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.x("smuadx r0, r1, r2");
  c.expectreg(0, 0x3e0e9076);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.expectQ(0);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.x("smuadx r0, r1, r2");
  c.expectreg(0, 0x49cb1aae);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.expectQ(0);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.x("smuadx r0, r1, r2");
  c.expectreg(0, 0xcd06a234);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.expectQ(0);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.x("smuadx r0, r1, r2");
  c.expectreg(0, 0xef38a268);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);
  c.expectQ(0);
  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.x("smuad r0, r1, r2");
  c.expectreg(0, 0x59fcfc6);
  c.expectreg(1, 0x573f7e1f);
  c.expectreg(2, 0x21dbf3ff);
  c.expectQ(0);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.x("smuad r0, r1, r2");
  c.expectreg(0, 0x247a69db);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.expectQ(0);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.x("smuad r0, r1, r2");
  c.expectreg(0, 0x41dbd2b4);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.expectQ(0);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.x("smuad r0, r1, r2");
  c.expectreg(0, 0x49622d05);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.expectQ(0);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.x("smuad r0, r1, r2");
  c.expectreg(0, 0x3981db2c);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.expectQ(0);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.x("smuad r0, r1, r2");
  c.expectreg(0, 0x26f4fde8);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);
  c.expectQ(0);
}

static void testsmmul() {
  Cpu c;
  c.r(0, 0x46f0edc1);
  c.r(1, 0x52df16aa);
  c.r(2, 0x32674b60);
  c.r(3, 0x1109902b);
  c.x("smmulr r0, r1, r2");
  c.expectreg(0, 0x10510296);
  c.expectreg(1, 0x52df16aa);
  c.expectreg(2, 0x32674b60);
  c.r(0, 0x2499e0cf);
  c.r(1, 0x7bed7ba9);
  c.r(2, 0x1d2d893b);
  c.r(3, 0x3f637e80);
  c.x("smmulr r0, r1, r2");
  c.expectreg(0, 0xe1ff230);
  c.expectreg(1, 0x7bed7ba9);
  c.expectreg(2, 0x1d2d893b);
  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.r(3, 0x248ca85d);
  c.x("smmulr r0, r1, r2");
  c.expectreg(0, 0xb8a25bb);
  c.expectreg(1, 0x573f7e1f);
  c.expectreg(2, 0x21dbf3ff);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.r(3, 0x61517e86);
  c.x("smmulr r0, r1, r2");
  c.expectreg(0, 0x1c65abf5);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.r(3, 0x539ee92b);
  c.x("smmulr r0, r1, r2");
  c.expectreg(0, 0x153f7173);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.r(3, 0x2af359cc);
  c.x("smmulr r0, r1, r2");
  c.expectreg(0, 0x223450c3);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.r(3, 0x7b1e098c);
  c.x("smmulr r0, r1, r2");
  c.expectreg(0, 0xf1484b2);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.r(3, 0x77eae3eb);
  c.x("smmulr r0, r1, r2");
  c.expectreg(0, 0x2c406cf9);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);

  c.r(0, 0x4f948054);
  c.r(1, 0x57a6f051);
  c.r(2, 0x6c64ba6);
  c.r(3, 0x60a4edca);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0x251cea6);
  c.expectreg(1, 0x57a6f051);
  c.expectreg(2, 0x6c64ba6);
  c.r(0, 0x1bebb369);
  c.r(1, 0x25e4660f);
  c.r(2, 0x2785f741);
  c.r(3, 0x7f637b92);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0x5d99fce);
  c.expectreg(1, 0x25e4660f);
  c.expectreg(2, 0x2785f741);
  c.r(0, 0x32988a4b);
  c.r(1, 0x6cc7e603);
  c.r(2, 0x6241362c);
  c.r(3, 0x1d873ac2);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0x29c03bd3);
  c.expectreg(1, 0x6cc7e603);
  c.expectreg(2, 0x6241362c);
  c.r(0, 0x24d9bff7);
  c.r(1, 0x7bb65b40);
  c.r(2, 0x1f0980a6);
  c.r(3, 0x7251b68b);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0xeffaca1);
  c.expectreg(1, 0x7bb65b40);
  c.expectreg(2, 0x1f0980a6);
  c.r(0, 0x46f0edc1);
  c.r(1, 0x52df16aa);
  c.r(2, 0x32674b60);
  c.r(3, 0x1109902b);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0x10510295);
  c.expectreg(1, 0x52df16aa);
  c.expectreg(2, 0x32674b60);
  c.r(0, 0x2499e0cf);
  c.r(1, 0x7bed7ba9);
  c.r(2, 0x1d2d893b);
  c.r(3, 0x3f637e80);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0xe1ff22f);
  c.expectreg(1, 0x7bed7ba9);
  c.expectreg(2, 0x1d2d893b);
  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.r(3, 0x248ca85d);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0xb8a25bb);
  c.expectreg(1, 0x573f7e1f);
  c.expectreg(2, 0x21dbf3ff);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.r(3, 0x61517e86);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0x1c65abf5);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.r(3, 0x539ee92b);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0x153f7172);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.r(3, 0x2af359cc);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0x223450c3);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.r(3, 0x7b1e098c);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0xf1484b1);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.r(3, 0x77eae3eb);
  c.x("smmul r0, r1, r2");
  c.expectreg(0, 0x2c406cf8);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);
}

static void testsmmls() {
  Cpu c;
  c.r(0, 0x4a18a269);
  c.r(1, 0x51baca25);
  c.r(2, 0x49863048);
  c.r(3, 0xc23f910);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0xf4aade3c);
  c.expectreg(1, 0x51baca25);
  c.expectreg(2, 0x49863048);
  c.expectreg(3, 0xc23f910);
  c.r(0, 0x1ac99db1);
  c.r(1, 0x4601a57);
  c.r(2, 0x3a11f4e4);
  c.r(3, 0x6278757f);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x617a60f6);
  c.expectreg(1, 0x4601a57);
  c.expectreg(2, 0x3a11f4e4);
  c.expectreg(3, 0x6278757f);
  c.r(0, 0x243f125c);
  c.r(1, 0x3a7d8013);
  c.r(2, 0x3e305171);
  c.r(3, 0x2723756e);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x18ee0646);
  c.expectreg(1, 0x3a7d8013);
  c.expectreg(2, 0x3e305171);
  c.expectreg(3, 0x2723756e);
  c.r(0, 0x4f948054);
  c.r(1, 0x57a6f051);
  c.r(2, 0x6c64ba6);
  c.r(3, 0x60a4edca);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x5e531f23);
  c.expectreg(1, 0x57a6f051);
  c.expectreg(2, 0x6c64ba6);
  c.expectreg(3, 0x60a4edca);
  c.r(0, 0x1bebb369);
  c.r(1, 0x25e4660f);
  c.r(2, 0x2785f741);
  c.r(3, 0x7f637b92);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x7989dbc4);
  c.expectreg(1, 0x25e4660f);
  c.expectreg(2, 0x2785f741);
  c.expectreg(3, 0x7f637b92);
  c.r(0, 0x32988a4b);
  c.r(1, 0x6cc7e603);
  c.r(2, 0x6241362c);
  c.r(3, 0x1d873ac2);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0xf3c6feef);
  c.expectreg(1, 0x6cc7e603);
  c.expectreg(2, 0x6241362c);
  c.expectreg(3, 0x1d873ac2);
  c.r(0, 0x24d9bff7);
  c.r(1, 0x7bb65b40);
  c.r(2, 0x1f0980a6);
  c.r(3, 0x7251b68b);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x635209ea);
  c.expectreg(1, 0x7bb65b40);
  c.expectreg(2, 0x1f0980a6);
  c.expectreg(3, 0x7251b68b);
  c.r(0, 0x46f0edc1);
  c.r(1, 0x52df16aa);
  c.r(2, 0x32674b60);
  c.r(3, 0x1109902b);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0xb88d95);
  c.expectreg(1, 0x52df16aa);
  c.expectreg(2, 0x32674b60);
  c.expectreg(3, 0x1109902b);
  c.r(0, 0x2499e0cf);
  c.r(1, 0x7bed7ba9);
  c.r(2, 0x1d2d893b);
  c.r(3, 0x3f637e80);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x31438c50);
  c.expectreg(1, 0x7bed7ba9);
  c.expectreg(2, 0x1d2d893b);
  c.expectreg(3, 0x3f637e80);
  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.r(3, 0x248ca85d);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x190282a2);
  c.expectreg(1, 0x573f7e1f);
  c.expectreg(2, 0x21dbf3ff);
  c.expectreg(3, 0x248ca85d);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.r(3, 0x61517e86);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x44ebd291);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.expectreg(3, 0x61517e86);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.r(3, 0x539ee92b);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x3e5f77b8);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.expectreg(3, 0x539ee92b);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.r(3, 0x2af359cc);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x8bf0909);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.expectreg(3, 0x2af359cc);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.r(3, 0x7b1e098c);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x6c0984da);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.expectreg(3, 0x7b1e098c);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.r(3, 0x77eae3eb);
  c.x("smmlsr r0, r1, r2, r3");
  c.expectreg(0, 0x4baa76f2);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);
  c.expectreg(3, 0x77eae3eb);

  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.r(3, 0x248ca85d);
  c.x("smmls r0, r1, r2, r3");
  c.expectreg(0, 0x190282a1);
  c.expectreg(1, 0x573f7e1f);
  c.expectreg(2, 0x21dbf3ff);
  c.expectreg(3, 0x248ca85d);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.r(3, 0x61517e86);
  c.x("smmls r0, r1, r2, r3");
  c.expectreg(0, 0x44ebd290);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.expectreg(3, 0x61517e86);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.r(3, 0x539ee92b);
  c.x("smmls r0, r1, r2, r3");
  c.expectreg(0, 0x3e5f77b8);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.expectreg(3, 0x539ee92b);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.r(3, 0x2af359cc);
  c.x("smmls r0, r1, r2, r3");
  c.expectreg(0, 0x8bf0908);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.expectreg(3, 0x2af359cc);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.r(3, 0x7b1e098c);
  c.x("smmls r0, r1, r2, r3");
  c.expectreg(0, 0x6c0984da);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.expectreg(3, 0x7b1e098c);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.r(3, 0x77eae3eb);
  c.x("smmls r0, r1, r2, r3");
  c.expectreg(0, 0x4baa76f2);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);
  c.expectreg(3, 0x77eae3eb);
}
static void testsmmla() {
  Cpu c;
  c.r(0, 0x32988a4b);
  c.r(1, 0x6cc7e603);
  c.r(2, 0x6241362c);
  c.r(3, 0x1d873ac2);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x47477695);
  c.expectreg(1, 0x6cc7e603);
  c.expectreg(2, 0x6241362c);
  c.expectreg(3, 0x1d873ac2);
  c.r(0, 0x24d9bff7);
  c.r(1, 0x7bb65b40);
  c.r(2, 0x1f0980a6);
  c.r(3, 0x7251b68b);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x8151632c);
  c.expectreg(1, 0x7bb65b40);
  c.expectreg(2, 0x1f0980a6);
  c.expectreg(3, 0x7251b68b);
  c.r(0, 0x46f0edc1);
  c.r(1, 0x52df16aa);
  c.r(2, 0x32674b60);
  c.r(3, 0x1109902b);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x215a92c1);
  c.expectreg(1, 0x52df16aa);
  c.expectreg(2, 0x32674b60);
  c.expectreg(3, 0x1109902b);
  c.r(0, 0x2499e0cf);
  c.r(1, 0x7bed7ba9);
  c.r(2, 0x1d2d893b);
  c.r(3, 0x3f637e80);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x4d8370b0);
  c.expectreg(1, 0x7bed7ba9);
  c.expectreg(2, 0x1d2d893b);
  c.expectreg(3, 0x3f637e80);
  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.r(3, 0x248ca85d);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x3016ce18);
  c.expectreg(1, 0x573f7e1f);
  c.expectreg(2, 0x21dbf3ff);
  c.expectreg(3, 0x248ca85d);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.r(3, 0x61517e86);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x7db72a7b);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.expectreg(3, 0x61517e86);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.r(3, 0x539ee92b);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x68de5a9e);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.expectreg(3, 0x539ee92b);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.r(3, 0x2af359cc);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x4d27aa8f);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.expectreg(3, 0x2af359cc);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.r(3, 0x7b1e098c);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0x8a328e3e);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.expectreg(3, 0x7b1e098c);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.r(3, 0x77eae3eb);
  c.x("smmlar r0, r1, r2, r3");
  c.expectreg(0, 0xa42b50e4);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);
  c.expectreg(3, 0x77eae3eb);

  c.r(0, 0x4f948054);
  c.r(1, 0x57a6f051);
  c.r(2, 0x6c64ba6);
  c.r(3, 0x60a4edca);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x62f6bc70);
  c.expectreg(1, 0x57a6f051);
  c.expectreg(2, 0x6c64ba6);
  c.expectreg(3, 0x60a4edca);
  c.r(0, 0x1bebb369);
  c.r(1, 0x25e4660f);
  c.r(2, 0x2785f741);
  c.r(3, 0x7f637b92);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x853d1b60);
  c.expectreg(1, 0x25e4660f);
  c.expectreg(2, 0x2785f741);
  c.expectreg(3, 0x7f637b92);
  c.r(0, 0x32988a4b);
  c.r(1, 0x6cc7e603);
  c.r(2, 0x6241362c);
  c.r(3, 0x1d873ac2);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x47477695);
  c.expectreg(1, 0x6cc7e603);
  c.expectreg(2, 0x6241362c);
  c.expectreg(3, 0x1d873ac2);
  c.r(0, 0x24d9bff7);
  c.r(1, 0x7bb65b40);
  c.r(2, 0x1f0980a6);
  c.r(3, 0x7251b68b);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x8151632c);
  c.expectreg(1, 0x7bb65b40);
  c.expectreg(2, 0x1f0980a6);
  c.expectreg(3, 0x7251b68b);
  c.r(0, 0x46f0edc1);
  c.r(1, 0x52df16aa);
  c.r(2, 0x32674b60);
  c.r(3, 0x1109902b);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x215a92c0);
  c.expectreg(1, 0x52df16aa);
  c.expectreg(2, 0x32674b60);
  c.expectreg(3, 0x1109902b);
  c.r(0, 0x2499e0cf);
  c.r(1, 0x7bed7ba9);
  c.r(2, 0x1d2d893b);
  c.r(3, 0x3f637e80);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x4d8370af);
  c.expectreg(1, 0x7bed7ba9);
  c.expectreg(2, 0x1d2d893b);
  c.expectreg(3, 0x3f637e80);
  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.r(3, 0x248ca85d);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x3016ce18);
  c.expectreg(1, 0x573f7e1f);
  c.expectreg(2, 0x21dbf3ff);
  c.expectreg(3, 0x248ca85d);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.r(3, 0x61517e86);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x7db72a7b);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.expectreg(3, 0x61517e86);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.r(3, 0x539ee92b);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x68de5a9d);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.expectreg(3, 0x539ee92b);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.r(3, 0x2af359cc);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x4d27aa8f);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.expectreg(3, 0x2af359cc);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.r(3, 0x7b1e098c);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0x8a328e3d);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.expectreg(3, 0x7b1e098c);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.r(3, 0x77eae3eb);
  c.x("smmla r0, r1, r2, r3");
  c.expectreg(0, 0xa42b50e3);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);
  c.expectreg(3, 0x77eae3eb);
}

static void testsmlsld() {
  Cpu c;
  c.r(0, 0x6aeeb077);
  c.r(1, 0x3811d9f3);
  c.r(2, 0x19752513);
  c.r(3, 0x18245e4);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x74e771f9);
  c.expectreg(1, 0x3811d9f3);
  c.expectreg(2, 0x19752513);
  c.expectreg(3, 0x18245e4);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x4d77f694);
  c.r(1, 0x4b3a9281);
  c.r(2, 0x33d59603);
  c.r(3, 0x401594d5);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x6cdd029a);
  c.expectreg(1, 0x4b3a9281);
  c.expectreg(2, 0x33d59603);
  c.expectreg(3, 0x401594d5);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x4a18a269);
  c.r(1, 0x51baca25);
  c.r(2, 0x49863048);
  c.r(3, 0xc23f910);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x454d5997);
  c.expectreg(1, 0x51baca25);
  c.expectreg(2, 0x49863048);
  c.expectreg(3, 0xc23f910);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x1ac99db1);
  c.r(1, 0x4601a57);
  c.r(2, 0x3a11f4e4);
  c.r(3, 0x6278757f);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0xff5a94d5);
  c.expectreg(1, 0x4601a56);
  c.expectreg(2, 0x3a11f4e4);
  c.expectreg(3, 0x6278757f);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x243f125c);
  c.r(1, 0x3a7d8013);
  c.r(2, 0x3e305171);
  c.r(3, 0x2723756e);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x4018e55a);
  c.expectreg(1, 0x3a7d8013);
  c.expectreg(2, 0x3e305171);
  c.expectreg(3, 0x2723756e);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x4f948054);
  c.r(1, 0x57a6f051);
  c.r(2, 0x6c64ba6);
  c.r(3, 0x60a4edca);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x47a44878);
  c.expectreg(1, 0x57a6f051);
  c.expectreg(2, 0x6c64ba6);
  c.expectreg(3, 0x60a4edca);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x1bebb369);
  c.r(1, 0x25e4660f);
  c.r(2, 0x2785f741);
  c.r(3, 0x7f637b92);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x408ae0c);
  c.expectreg(1, 0x25e4660f);
  c.expectreg(2, 0x2785f741);
  c.expectreg(3, 0x7f637b92);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x32988a4b);
  c.r(1, 0x6cc7e603);
  c.r(2, 0x6241362c);
  c.r(3, 0x1d873ac2);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x33b2625c);
  c.expectreg(1, 0x6cc7e603);
  c.expectreg(2, 0x6241362c);
  c.expectreg(3, 0x1d873ac2);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x24d9bff7);
  c.r(1, 0x7bb65b40);
  c.r(2, 0x1f0980a6);
  c.r(3, 0x7251b68b);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x3b88ca40);
  c.expectreg(1, 0x7bb65b40);
  c.expectreg(2, 0x1f0980a6);
  c.expectreg(3, 0x7251b68b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x46f0edc1);
  c.r(1, 0x52df16aa);
  c.r(2, 0x32674b60);
  c.r(3, 0x1109902b);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x22a8fa42);
  c.expectreg(1, 0x52df16aa);
  c.expectreg(2, 0x32674b60);
  c.expectreg(3, 0x1109902b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x2499e0cf);
  c.r(1, 0x7bed7ba9);
  c.r(2, 0x1d2d893b);
  c.r(3, 0x3f637e80);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0xe2b02ce8);
  c.expectreg(1, 0x7bed7ba8);
  c.expectreg(2, 0x1d2d893b);
  c.expectreg(3, 0x3f637e80);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x4d9600);
  c.r(1, 0x573f7e1f);
  c.r(2, 0x21dbf3ff);
  c.r(3, 0x248ca85d);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0xff9441df);
  c.expectreg(1, 0x573f7e1e);
  c.expectreg(2, 0x21dbf3ff);
  c.expectreg(3, 0x248ca85d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x11bcfe32);
  c.r(1, 0x600c4571);
  c.r(2, 0x4bb01dcb);
  c.r(3, 0x61517e86);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x3b0ddc4);
  c.expectreg(1, 0x600c4571);
  c.expectreg(2, 0x4bb01dcb);
  c.expectreg(3, 0x61517e86);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x37b335c2);
  c.r(1, 0x52766971);
  c.r(2, 0x41f66c50);
  c.r(3, 0x539ee92b);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x187ebf5e);
  c.expectreg(1, 0x52766971);
  c.expectreg(2, 0x41f66c50);
  c.expectreg(3, 0x539ee92b);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x785acf81);
  c.r(1, 0x697c6391);
  c.r(2, 0x530264bd);
  c.r(3, 0x2af359cc);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x8dc3ac37);
  c.expectreg(1, 0x697c6391);
  c.expectreg(2, 0x530264bd);
  c.expectreg(3, 0x2af359cc);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x56444995);
  c.r(1, 0x35439ae9);
  c.r(2, 0x487a948e);
  c.r(3, 0x7b1e098c);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x2f6768f1);
  c.expectreg(1, 0x35439ae9);
  c.expectreg(2, 0x487a948e);
  c.expectreg(3, 0x7b1e098c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x30f9f629);
  c.r(1, 0x67841534);
  c.r(2, 0x6d6fc017);
  c.r(3, 0x77eae3eb);
  c.x("smlsld r0, r1, r2, r3");
  c.expectreg(0, 0x4ba0fd0);
  c.expectreg(1, 0x67841534);
  c.expectreg(2, 0x6d6fc017);
  c.expectreg(3, 0x77eae3eb);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
}

static void testsmlsd() {
  Cpu c;
  c.r(0, 0x216231b);
  c.r(1, 0x1f16e9e8);
  c.r(2, 0x1190cde7);
  c.r(3, 0x66ef438d);
  c.x("smlsd r0, r1, r2, r3");
  c.expectreg(0, 0x69202985);
  c.expectreg(1, 0x1f16e9e8);
  c.expectreg(2, 0x1190cde7);
  c.expectreg(3, 0x66ef438d);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x140e0f76);
  c.r(1, 0x3352255a);
  c.r(2, 0x109cf92e);
  c.r(3, 0xded7263);
  c.x("smlsd r0, r1, r2, r3");
  c.expectreg(0, 0x99a4c97);
  c.expectreg(1, 0x3352255a);
  c.expectreg(2, 0x109cf92e);
  c.expectreg(3, 0xded7263);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x7fdcc233);
  c.r(1, 0x1befd79f);
  c.r(2, 0x41a7c4c9);
  c.r(3, 0x6b68079a);
  c.x("smlsd r0, r1, r2, r3");
  c.expectreg(0, 0x6d952788);
  c.expectreg(1, 0x1befd79f);
  c.expectreg(2, 0x41a7c4c9);
  c.expectreg(3, 0x6b68079a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x4e6afb66);
  c.r(1, 0x25e45d32);
  c.r(2, 0x519b500d);
  c.r(3, 0x431bd7b7);
  c.x("smlsd r0, r1, r2, r3");
  c.expectreg(0, 0x542c1e35);
  c.expectreg(1, 0x25e45d32);
  c.expectreg(2, 0x519b500d);
  c.expectreg(3, 0x431bd7b7);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x3f2dba31);
  c.r(1, 0x7c83e458);
  c.r(2, 0x257130a3);
  c.r(3, 0x62bbd95a);
  c.x("smlsd r0, r1, r2, r3");
  c.expectreg(0, 0x4b44d88f);
  c.expectreg(1, 0x7c83e458);
  c.expectreg(2, 0x257130a3);
  c.expectreg(3, 0x62bbd95a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x436c6125);
  c.r(1, 0x628c895d);
  c.r(2, 0x333ab105);
  c.r(3, 0x721da317);
  c.x("smlsd r0, r1, r2, r3");
  c.expectreg(0, 0x82ff6730);
  c.expectreg(1, 0x628c895d);
  c.expectreg(2, 0x333ab105);
  c.expectreg(3, 0x721da317);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
}
static void testsmlawb() {
  Cpu c;
  c.r(0, 0x580bd78f);
  c.r(1, 0x153ea438);
  c.r(2, 0x3855585c);
  c.r(3, 0x70a64e2a);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x77fb7920);
  c.expectreg(1, 0x153ea438);
  c.expectreg(2, 0x3855585c);
  c.expectreg(3, 0x70a64e2a);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x6a2342ec);
  c.r(1, 0x2a487cb0);
  c.r(2, 0x1d4ed43b);
  c.r(3, 0x725a06fb);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x6b1f5041);
  c.expectreg(1, 0x2a487cb0);
  c.expectreg(2, 0x1d4ed43b);
  c.expectreg(3, 0x725a06fb);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x2cd89a32);
  c.r(1, 0x57e4ccaf);
  c.r(2, 0x7a6d8d3c);
  c.r(3, 0x4b588f54);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0x23f16101);
  c.expectreg(1, 0x57e4ccaf);
  c.expectreg(2, 0x7a6d8d3c);
  c.expectreg(3, 0x4b588f54);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(0);
  c.r(0, 0x542289ec);
  c.r(1, 0x6de91b18);
  c.r(2, 0x38437fdb);
  c.r(3, 0x7644a45c);
  c.x("smlawb r0, r1, r2, r3");
  c.expectreg(0, 0xad294f37);
  c.expectreg(1, 0x6de91b18);
  c.expectreg(2, 0x38437fdb);
  c.expectreg(3, 0x7644a45c);
  c.expectN(0);
  c.expectZ(0);
  c.expectC(0);
  c.expectV(0);
  c.expectQ(1);
}

static void testsmul() {
  Cpu c;
  c.r(0, 0x12345678);
  c.x("smlabt r1, r0, r0, r3");
  assert(c.r(1) == 0x6260060);
  c.r(0, 0xffffffff);
  c.x("smlabt r1, r0, r0, r3");
  assert(c.r(1) == 1);

  c.r(3, 0x12345678);
  c.x("smlad r1, r0, r0, r3");
  assert(c.r(1) == 0x1234567a);
  c.r(0, 0x12345678);
  c.x("smladx r1, r0, r0, r3");
  assert(c.r(1) == 0x1e805738);

  c.r(0, 0x12345678);
  c.r(1, 0x87654321);
  c.x("smlal r1, r0, r0, r0");
  assert(c.r(0) == 0x137fbd54);
  assert(c.r(1) == 0xa55a1b61);

  c.r(0, 0x12345678);
  c.r(1, 0x87654321);
  c.x("smlalbt r1, r0, r0, r0");
  assert(c.r(0) == 0x12345678);
  printf("r1: %x\n", c.r(1));
  assert(c.r(1) == 0x8d8b4381);

  c.r(0, 0x12345678);
  c.r(1, 0x87654321);
  c.x("smlalbb r1, r0, r0, r0");
  assert(c.r(0) == 0x12345678);
  printf("r1: %x\n", c.r(1));
  assert(c.r(1) == 0xa49a1b61);

  c.r(0, 0xffffffff);
  c.r(1, 0xffffffff);
  c.x("smlalbt r1, r0, r0, r0");
  assert(c.r(0) == 0);
  printf("r1: %x\n", c.r(1));
  assert(c.r(1) == 0);

  c.r(3, 0x12345678);
  c.r(0, 0xff00ff00);
  c.r(1, 0xff00ff);
  c.x("smlald r1, r0, r0, r3");
  assert(c.r(1) == 0x9654ff);

  c.r(0, 0x12345678);
  c.r(1, 0x87654321);
  c.r(3, 0x87654321);
  c.x("smlaldx r1, r0, r0, r3");
  assert(c.r(1) == 0x636e9d2d);
}

static void testxtab() {
  Cpu c;
  c.r(0, 0xff);

  c.x("sxtab r1, r2, r0");
  assert(c.r(1) == 0xffffffff);
  c.r(0, 0x12345678);
  c.x("sxtab16 r1, r2, r0");
  assert(c.r(1) == 0x340078);
  c.r(0, 0x12348678);
  c.x("sxtah r1, r2, r0");
  assert(c.r(1) == 0xffff8678);
  c.r(0, 0x800080);
  c.x("sxtb16 r1, r0");
  assert(c.r(1) == 0xff80ff80);
  c.r(0, 0x12345678);
  c.x("uxtab r1, r0, r0");
  assert(c.r(1) == 0x123456f0);
  c.x("uxtab16 r1, r0, r0");
  assert(c.r(1) == 0x126856f0);
  c.x("uxtah r1, r0, r0");
  assert(c.r(1) == 0x1234acf0);
  c.x("uxtb r1, r0");
  assert(c.r(1) == 0x78);
  c.x("uxtb16 r1, r0");
  assert(c.r(1) == 0x340078);
  c.x("uxth r1, r0");
  assert(c.r(1) == 0x5678);
}

static void testubfx() {
  Cpu c;
  c.r(0, 0x12345678);
  c.x("ubfx r0, r0, #9, #3");
  assert(c.r(0) == 3);
}

static void testdiv() {
  Cpu c;
  c.r(0, 8);
  c.r(1, 2);
  c.x("sdiv r0, r0, r1");
  printf("r0: ===> %d\n", c.r(0));
  assert(c.r(0) == 4);

  c.r(0, 0x80000000);
  c.r(1, 0xffffffff);
  c.x("sdiv r0, r0, r1");
  assert(c.r(0) == 0x80000000);
}

static void testrbit() {
  Cpu c;
  c.r(0, 0x8000000f);
  c.x("rbit r0, r0");
  assert(c.r(0) == 0xf0000001);

  c.r(0, 0xffff0000);
  c.x("rev r0, r0");
  assert(c.r(0) == 0xffff);

  c.r(0, 0xffeeddbb);
  c.x("rev16 r0, r0");
  assert(c.r(0) == 0xeeffbbdd);

  c.r(0, 0xddff);
  c.x("revsh r0, r0");
  assert(c.r(0) == 0xffffffdd);

  c.r(0, 0b1);
  c.x("sbfx r1, r0, #0, #1");

  std::printf("----------====>>: %b\n", c.r(1));
  assert(c.r(1) == 0xffffffff);
  c.r(0, 0x80000000);
  c.x("sbfx r1 ,r0, #31, #1");
  std::printf("----------====>>: %b\n", c.r(1));
  assert(c.r(1) == 0xffffffff);
}

static void testq() {
  Cpu c;

  c.r(1, 0x12345678);
  c.r(2, 0x87654321);

  return;

  c.x("qsub16 r0, r1, r2");
  assert(c.r(0) == 0x7fff1357);

  c.x("qsub8 r0, r1, r2");
  assert(c.r(0) == 0x7fcf1357);

  c.r(0, 0x12345678);
  c.x("qsax r0, r0, r0");
  assert(c.r(0) == 0xbbbc68ac);

  c.r(0, 0xffffffff);
  c.x("qdsub r0, r0, r0");
  assert(c.r(0) == 1);

  c.r(0, 0xffffffff);
  c.x("qdadd r0, r0, r0");
  assert(c.r(0) == 0xfffffffd);

  c.r(0, 0xffffffff);
  c.x("qadd r0,  r0, r0");

  c.r(0, 0xffffffff);
  c.x("qadd16 r0, r0, r0");
  assert(c.r(0) == 0xfffefffe);

  c.r(0, 0x88888888);
  c.x("qadd16 r0, r0, r0");
  assert(c.r(0) == 0x80008000);

  c.r(0, 0xdddddddd);
  c.x("qadd16 r0, r0, r0");
  assert(c.r(0) == 0xbbbabbba);

  c.r(0, 0xffffdddd);
  c.x("qadd16 r0, r0, r0");
  assert(c.r(0) == 0xfffebbba);

  c.r(0, 0xbbbbbbbb);
  c.x("qadd16 r0, r0, r0");
  assert(c.r(0) == 0x80008000);

  c.r(0, 0xddddddd);
  c.x("qadd16 r0, r0, r0");
  assert(c.r(0) == 0x1bbabbba);

  c.r(0, 0xffffffff);
  c.x("qadd8 r0, r0, r0");
  assert(c.r(0) == 0xfefefefe);

  c.r(0, 0xffffffff);
  c.x("qasx r0, r0, r0");
  assert(c.r(0) == 0xfffe0000);

  c.r(0, 0x12345678);
  c.x("qasx r0, r0, r0");
  assert(c.r(0) == 0x68ac4444);
}

static void testmrs() {
  Cpu c;
  c.z(1);
  c.n(1);
  c.v(1);
  c.c(1);
  c.q(1);
  c.x("mrs r0, apsr");
  assert(c.r(0) == 0xf8000000);
  c.cf();
  assert(c.apsr.back == 0);
  c.x("msr apsr_nzcvq, #0xf8000000");
  assert(c.apsr.back == 0xf8000000);
  c.cf();
  c.r(0, 0xf800f000);
  assert(c.apsr.back == 0);
  c.x("msr apsr_nzcvq, r0");
  assert(c.apsr.back == 0xf8000000);
}

static void testmul() {
  Cpu c;
  c.r(0, 40);
  c.r(1, 40);
  c.r(2, 40);
  c.x("mla r3, r1, r2, r0");
  assert(c.r(3) == 40 * 40 + 40);
  c.r(2, 2000);
  c.x("mls r3, r0, r1, r2");
  c.printRegisters();
  assert(c.r(3) == 2000 - 40 * 40);
}

static void testbits() {
  Cpu c;
  c.r(0, 0b1111);
  c.x("bfc r0, #0, #32");
  assert(c.r(0) == 0);
  c.r(0, 0xffff);
  c.x("bfc r0, #8, #4");
  assert(c.r(0) == 0xf0ff);
  c.x("bfc r0, #0, #4");
  assert(c.r(0) == 0xf0f0);
  c.r(0, NEG);
  c.x("bfc r0, #31, #1");
  assert(c.r(0) == 0);

  c.r(0, 0x30);
  c.r(1, 0xf);
  c.x("bfi r0, r1, #0, #4");
  assert(c.r(0) == 0x3f);
  c.x("bfi r0, r1, #28, #4");
  assert(c.r(0) == 0xf000003f);

  c.x("bfi r2, r1, #31, #1");
  assert(c.r(2) == NEG);

  c.x("bfi r3, r1, #0, #1");
  assert(c.r(3) == 1);

  c.x("bfc r1, #1, #1");
  assert(c.r(1) == 0b1101);

  c.x("clz r0, r5");
  assert(c.r(0) == 32);

  c.r(0, 0b11);
  c.x("clz r0, r0");
  assert(c.r(0) == 30);

  c.r(0, 0xddddaaaa);
  c.r(1, 0xccccbbbb);

  c.x("pkhbt r2, r0, r1");
  assert(c.r(2) == 0xccccaaaa);

  c.x("pkhtb r2, r0, r1");
  assert(c.r(2) == 0xddddbbbb);
}

static void testmov() {
  Cpu c;
  c.x("mov r0, #0xf0000000");
  assert(c.r(0) == 0xf0000000);
  c.x("movw r0, #0xffff");
  assert(c.r(0) == 0xffff);
  c.x("mov r1, r1");
  assert(!c.z());
  c.x("movs r0,r1");
  assert(c.z());
  c.x("mov r15, #4");
  assert(c.pc() == 12);

  c.r(0, 0x8888);
  c.x("movt r0, #0xffff");
  assert(c.r(0) >> 16 == 0xffff);
  assert((c.r(0) & 0xffff) == 0x8888);
}

static void testshift() {
  Cpu c;
  c.r(1, NEG);
  c.x("asr r0, r1, #3");
  assert(c.r(0) == 0xf0000000);

  c.r(0, NEG);
  c.r(1, 3);
  c.x("asr r0, r0, r1");
  assert(c.r(0) == 0xf0000000);

  c.r(0, 1);
  c.c(true);
  c.x("rrx r0, r0");
  assert(c.r(0) == NEG);
}

static void testand() {
  Cpu c;
  c.x("ands r0, #0");
  assert(c.z());
  c.x("add r0, r0,#0xff000000");
  c.x("ands r1, r0, #0xff000000");
  assert(!c.z());
  assert(c.r(1) == 0xff000000);

  c.r(0, 1);
  c.r(1, 0xffffffff);
  c.x("and r1, r1 , r0, lsl r0");
  assert(c.r(1) == 2);

  c.r(0, 0xf);
  c.r(1, 0xf);
  c.x("and r0, r0, r1, lsl #1");
  assert(c.r(0) == 0b1110);

  c.r(0, 0xffff);
  c.x("bic r0, r0,#0xff");
  assert(c.r(0) == 0xff00);
}

static void testadr() {
  Cpu c;
  c.r(15, 4);
  c.x("adr r0, .");
  assert(c.r(0) == 4);
  c.r(15, 0);
  c.r(0, 0);
  c.x("sub r0, pc, #2");
  assert(c.r(0) == 6);
  c.r(15, 0);
  c.r(0, 0);
  c.x("add r0, pc, #2");
  assert(c.r(0) == 10);
}

static void testadcShiftedReg() {
  Cpu c;
  c.r(0, 1);
  c.r(1, 4);
  c.c(true);
  c.x("adc r1, r1, r1, lsl r0");
  assert(c.r(1) == 8 + 4 + 1);
}

static void testaddImm() {
  Cpu c;
  c.x("adds r0, r0, #0");
  assert(c.z());
  c.cf();
  c.x("add r0, r0, #1");
  assert(c.r(0) == 1);
  c.x("adds r1, r1, #0x80000000");
  assert(c.n());
  assert(c.r(1) == 0x80000000);
  c.c(true);
  c.x("adds r2, r2, #0");
  assert(c.r(2) == 0);
  assert(!c.c());

  c.cf();
  c.r(0, 0);
  c.x("add r15, r0, #4");
  assert(c.r(15) == 4);

  c.cf();
  c.r(0, 0);
  c.r(1, 0);
  c.x("subs r0, r0, #1");
  assert(c.r(0) == 0xffffffff);
}

static void testadcReg() {
  Cpu c;
  c.r(0, 5);
  c.r(1, 5);
  c.x("adc r2, r0, r1");
  assert(c.r(2) == 10);
  c.r(2, 1);
  c.x("adc r0, r2, r2, lsl #2");
  assert(c.r(0) == (0b100 + 1));

  c.r(2, 1);
  c.x("adc r0, r2, r2, lsl #31");
  assert(c.r(0) == (0x80000000 + 1));

  c.r(2, 1);
  c.x("adc r0, r2, r2, lsr #1");
  assert(c.r(0) == (0b1));

  c.r(2, 1);
  c.x("adc r0, r2, r2, ror #1");
  assert(c.r(0) == (0x80000000 + 1));

  c.r(2, 0x80000000);
  c.x("adc r0, r4, r2, asr #3");
  assert(c.r(0) == (0xf0000000));

  c.r(2, 0b11);
  c.cf();
  c.x("adc r0, r5, r2, ror #0");
  // TODO maybe toolchain bug
  // assert(c.r(0)==(0b1));
}

static void testadcImm() {
  Cpu c;
  c.x("adcs r0, r0, #0");
  assert(c.z());
  c.cf();
  c.x("adc r0, r0, #1");
  assert(c.r(0) == 1);
  c.x("adcs r1, r1, #0x80000000");
  assert(c.n());
  assert(c.r(1) == 0x80000000);
  c.c(true);
  c.x("adcs r2, r2, #0");
  assert(c.r(2) == 1);
  assert(!c.c());

  assert(Cpu::bm(2) == 0b11);
  assert(Cpu::bm(1) == 1);
  assert(Cpu::bm(32) == 0xffffffff);

  c.cf();
  c.r(0, 0);
  c.x("adc r15, r0, #4");
  assert(c.r(15) == 4);
}
