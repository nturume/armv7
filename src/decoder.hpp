
#pragma once
#include "./stuff.hpp"
#include <cassert>
#include <sys/types.h>

enum class InstrSet { thumb, arm };

enum class Instr {
  srs,
  rfe,
  blx,
  bl,
  stc2,
  ldc2Lit,
  ldc2Imm,
  mcrr2,
  mrrc2,
  cdp2,
  mcr2,
  mrc2,
  cps,
  setend,
  unpredictable,
  nop,
  pliImm,
  pldImm,
  pldLit,
  clrex,
  dsb,
  dmb,
  isb,
  pliReg,
  pldReg,
  undefined,
  strImm,
  strReg,
  strt1,
  strt2, // B==0
  ldrImm,
  ldrLit,
  ldrReg,
  ldrt1,
  ldrt2, // B==0
  strbImm,
  strbReg,
  strbt1,
  strbt2, // B==0
  ldrbImm,
  ldrbLit,
  ldrbReg,
  ldrbt1,
  ldrbt2, // B==0
  stmda,
  ldmda,
  stm,
  ldm,
  pop,
  stmdb,
  push,
  ldmdb,
  stmib,
  ldmib,
  ldmUser,
  stmUser,
  ldmExRet,
  b,
  svc,
  stc1,
  ldc1Imm,
  ldc1Lit,
  mcrr1,
  mrrc1,
  cdp1,
  mcr1,
  mrc1,
  usada8,
  usad8,
  sbfx,
  bfc,
  bfi,
  ubfx,

  sadd16,
  sasx,
  ssax,
  ssub16,
  sadd8,
  ssub8,

  qadd16,
  qasx,
  qsax,
  qsub16,
  qadd8,
  qsub8,

  shadd16,
  shasx,
  shsax,
  shsub16,
  shadd8,
  shsub8,

  uadd16,
  uasx,
  usax,
  usub16,
  uadd8,
  usub8,

  uqadd16,
  uqasx,
  uqsax,
  uqsub16,
  uqadd8,
  uqsub8,

  uhadd16,
  uhasx,
  uhsax,
  uhsub16,
  uhadd8,
  uhsub8,

  pkh,
  sxtab16,
  sxtb16,
  sel,
  ssat,
  ssat16,
  sxtab,
  sxtb,
  rev,
  sxtah,
  sxth,
  rev16,
  uxtab16,
  uxtb16,
  usat,
  usat16,
  uxtab,
  uxtb,
  rbit,
  uxtah,
  uxth,
  revsh,

  smlad,
  smuad,
  smlsd,
  smusd,
  sdiv,
  udiv,
  smlald,
  smlsld,
  smmla,
  smmul,
  smmls,

  andReg,
  eorReg,
  subReg,
  rsbReg,
  addReg,
  adcReg,
  sbcReg,
  rscReg,
  tstReg,
  teqReg,
  cmpReg,
  cmnReg,
  orrReg,
  movReg,
  lslImm,
  lsrImm,
  asrImm,
  rrx,
  rorImm,
  bicReg,
  mvnReg,

  andShiftedReg,
  eorShiftedReg,
  subShiftedReg,
  rsbShiftedReg,
  addShiftedReg,
  adcShiftedReg,
  sbcShiftedReg,
  rscShiftedReg,
  tstShiftedReg,
  teqShiftedReg,
  cmpShiftedReg,
  cmnShiftedReg,
  orrShiftedReg,
  lslReg,
  lsrReg,
  asrReg,
  rorReg,
  bicShiftedReg,
  mvnShiftedReg,

  mrsBanked,
  msrBanked,
  mrs,
  // msr,
  msrApp,
  msrSys,

  bx,
  clz,
  bxj,
  blxReg,
  eret,
  bkpt,
  hvc,
  smc,

  qadd,
  qsub,
  qdadd,
  qdsub,

  smlabb,
  smlawb,
  smulwb,
  smlalbb,
  smulbb,

  mul,
  mla,
  umaal,
  mls,
  umull,
  umlal,
  smull,
  smlal,

  swp,
  strex,
  ldrex,
  strexd,
  ldrexd,
  strexb,
  ldrexb,
  strexh,
  ldrexh,

  strhReg,
  ldrhReg,
  strhImm,
  ldrhImm,
  ldrhLit,
  ldrdReg,
  ldrsbReg,
  ldrdImm,
  ldrdLit,
  ldrsbImm,
  ldrsbLit,

  strht,
  strht2,
  ldrht,
  ldrsbt,
  ldrsht,

  andImm,
  eorImm,
  subImm,
  adr,
  rsbImm,
  addImm,
  adcImm,
  sbcImm,
  rscImm,
  tstImm,
  teqImm,
  cmpImm,
  cmnImm,
  orrImm,
  movImm,
  bicImm,
  mvnImm,

  movImm16,
  movt,

  strd,
  ldrsh,
  strdImm,
  ldrshImm,
  ldrshLit,

  yield,
  wfe,
  wfi,
  sev,
  csdb,
  dbg,
  msrImmApp,
  msrImmSys,

  //===========thumb16
  lslimmT1,
  lsrimmT1,
  asrimmT1,
  addregT1,
  subregT1,
  addimmT1,
  subimmT1,
  movimmT1,
  cmpimmT1,
  addimmT2,
  subimmT2,

  andregT1,
  eorregT1,
  lslregT1,
  lsrregT1,
  asrregT1,
  adcregT1,
  sbcregT1,
  rorregT1,
  tstregT1,
  rsbimmT1,
  cmpregT1,
  cmnregT1,
  orrregT1,
  mulT1,
  bicregT1,
  mvnregT1,

  addregT2,
  cmpregT2,
  movregT1,
  movregT2,
  bxT1,
  blxT1,

  ldrlitT1,
  adrT1,
  addspimmT1,
  stmT1,
  ldmT1,
  bT2,

  strregT1,
  strhregT1,
  strbregT1,
  ldrsbregT1,
  ldrregT1,
  ldrhregT1,
  ldrbregT1,
  ldrshregT1,
  strimmT1,
  ldrimmT1,
  strbimmT1,
  ldrbimmT1,
  strhimmT1,
  ldrhimmT1,
  strimmT2,
  ldrimmT2,

  nopT1,
  yieldT1,
  wfeT1,
  wfiT1,
  sevT1,
  itT1,

  cpsT1,
  addspimmT2,
  subspimmT1,
  sxthT1,
  sxtbT1,
  uxthT1,
  uxtbT1,
  revT1,
  rev16T1,
  revshT1,
  pushT1,
  popT1,
  cbzT1,
  bkptT1,
  setendT1,

  svcT1,
  bT1,
};

namespace Decoder {
void test();
Instr decodeA(u32 instr);
Instr decodeT(u32 instr);
inline Instr decode(u32 word, InstrSet i) {
  if (i == InstrSet::thumb) {
    return decodeT(word);
  }
  if (i == InstrSet::arm) {
    return decodeA(word);
  }
  assert(false);
}
int printInstr(Instr instr);
}; // namespace Decoder
